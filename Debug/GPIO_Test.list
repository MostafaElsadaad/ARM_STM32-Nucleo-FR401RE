
GPIO_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000253c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080026dc  080026dc  000126dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002700  08002700  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002700  08002700  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002700  08002700  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002700  08002700  00012700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002704  08002704  00012704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d50  2000000c  08002714  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d5c  08002714  00021d5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000051e5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001097  00000000  00000000  00025221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c8  00000000  00000000  000262b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000440  00000000  00000000  00026780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001980  00000000  00000000  00026bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000058ad  00000000  00000000  00028540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00010908  00000000  00000000  0002dded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0003e6f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001258  00000000  00000000  0003e748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080026c4 	.word	0x080026c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	080026c4 	.word	0x080026c4

080001e0 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80001e6:	2018      	movs	r0, #24
 80001e8:	f001 feee 	bl	8001fc8 <pvPortMalloc>
 80001ec:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d007      	beq.n	8000204 <xEventGroupCreate+0x24>
        {
            pxEventBits->uxEventBits = 0;
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	3304      	adds	r3, #4
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 f8c8 	bl	8000394 <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 8000204:	687b      	ldr	r3, [r7, #4]
    }
 8000206:	4618      	mov	r0, r3
 8000208:	3708      	adds	r7, #8
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}

0800020e <xEventGroupClearBits>:
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                  const EventBits_t uxBitsToClear )
{
 800020e:	b580      	push	{r7, lr}
 8000210:	b086      	sub	sp, #24
 8000212:	af00      	add	r7, sp, #0
 8000214:	6078      	str	r0, [r7, #4]
 8000216:	6039      	str	r1, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	617b      	str	r3, [r7, #20]
    EventBits_t uxReturn;

    /* Check the user is not attempting to clear the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d10a      	bne.n	8000238 <xEventGroupClearBits+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000226:	f383 8811 	msr	BASEPRI, r3
 800022a:	f3bf 8f6f 	isb	sy
 800022e:	f3bf 8f4f 	dsb	sy
 8000232:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000234:	bf00      	nop
 8000236:	e7fe      	b.n	8000236 <xEventGroupClearBits+0x28>
    configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800023e:	2b00      	cmp	r3, #0
 8000240:	d00a      	beq.n	8000258 <xEventGroupClearBits+0x4a>
        __asm volatile
 8000242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000246:	f383 8811 	msr	BASEPRI, r3
 800024a:	f3bf 8f6f 	isb	sy
 800024e:	f3bf 8f4f 	dsb	sy
 8000252:	60bb      	str	r3, [r7, #8]
    }
 8000254:	bf00      	nop
 8000256:	e7fe      	b.n	8000256 <xEventGroupClearBits+0x48>

    taskENTER_CRITICAL();
 8000258:	f001 fdde 	bl	8001e18 <vPortEnterCritical>
    {
        traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

        /* The value returned is the event group value prior to the bits being
         * cleared. */
        uxReturn = pxEventBits->uxEventBits;
 800025c:	697b      	ldr	r3, [r7, #20]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	613b      	str	r3, [r7, #16]

        /* Clear the bits. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000262:	697b      	ldr	r3, [r7, #20]
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	43db      	mvns	r3, r3
 800026a:	401a      	ands	r2, r3
 800026c:	697b      	ldr	r3, [r7, #20]
 800026e:	601a      	str	r2, [r3, #0]
    }
    taskEXIT_CRITICAL();
 8000270:	f001 fe02 	bl	8001e78 <vPortExitCritical>

    return uxReturn;
 8000274:	693b      	ldr	r3, [r7, #16]
}
 8000276:	4618      	mov	r0, r3
 8000278:	3718      	adds	r7, #24
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}

0800027e <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 800027e:	b580      	push	{r7, lr}
 8000280:	b08e      	sub	sp, #56	; 0x38
 8000282:	af00      	add	r7, sp, #0
 8000284:	6078      	str	r0, [r7, #4]
 8000286:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem;
    ListItem_t * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8000288:	2300      	movs	r3, #0
 800028a:	633b      	str	r3, [r7, #48]	; 0x30
    EventGroup_t * pxEventBits = xEventGroup;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	62bb      	str	r3, [r7, #40]	; 0x28
    BaseType_t xMatchFound = pdFALSE;
 8000290:	2300      	movs	r3, #0
 8000292:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d10a      	bne.n	80002b0 <xEventGroupSetBits+0x32>
        __asm volatile
 800029a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800029e:	f383 8811 	msr	BASEPRI, r3
 80002a2:	f3bf 8f6f 	isb	sy
 80002a6:	f3bf 8f4f 	dsb	sy
 80002aa:	613b      	str	r3, [r7, #16]
    }
 80002ac:	bf00      	nop
 80002ae:	e7fe      	b.n	80002ae <xEventGroupSetBits+0x30>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d00a      	beq.n	80002d0 <xEventGroupSetBits+0x52>
        __asm volatile
 80002ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002be:	f383 8811 	msr	BASEPRI, r3
 80002c2:	f3bf 8f6f 	isb	sy
 80002c6:	f3bf 8f4f 	dsb	sy
 80002ca:	60fb      	str	r3, [r7, #12]
    }
 80002cc:	bf00      	nop
 80002ce:	e7fe      	b.n	80002ce <xEventGroupSetBits+0x50>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 80002d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002d2:	3304      	adds	r3, #4
 80002d4:	627b      	str	r3, [r7, #36]	; 0x24
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80002d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002d8:	3308      	adds	r3, #8
 80002da:	623b      	str	r3, [r7, #32]
    vTaskSuspendAll();
 80002dc:	f000 fdca 	bl	8000e74 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 80002e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	637b      	str	r3, [r7, #52]	; 0x34

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 80002e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	431a      	orrs	r2, r3
 80002ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002f0:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 80002f2:	e03c      	b.n	800036e <xEventGroupSetBits+0xf0>
        {
            pxNext = listGET_NEXT( pxListItem );
 80002f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	61fb      	str	r3, [r7, #28]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80002fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	61bb      	str	r3, [r7, #24]
            xMatchFound = pdFALSE;
 8000300:	2300      	movs	r3, #0
 8000302:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8000304:	69bb      	ldr	r3, [r7, #24]
 8000306:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800030a:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800030c:	69bb      	ldr	r3, [r7, #24]
 800030e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000312:	61bb      	str	r3, [r7, #24]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800031a:	2b00      	cmp	r3, #0
 800031c:	d108      	bne.n	8000330 <xEventGroupSetBits+0xb2>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800031e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	69bb      	ldr	r3, [r7, #24]
 8000324:	4013      	ands	r3, r2
 8000326:	2b00      	cmp	r3, #0
 8000328:	d00b      	beq.n	8000342 <xEventGroupSetBits+0xc4>
                {
                    xMatchFound = pdTRUE;
 800032a:	2301      	movs	r3, #1
 800032c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800032e:	e008      	b.n	8000342 <xEventGroupSetBits+0xc4>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8000330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	69bb      	ldr	r3, [r7, #24]
 8000336:	4013      	ands	r3, r2
 8000338:	69ba      	ldr	r2, [r7, #24]
 800033a:	429a      	cmp	r2, r3
 800033c:	d101      	bne.n	8000342 <xEventGroupSetBits+0xc4>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 800033e:	2301      	movs	r3, #1
 8000340:	62fb      	str	r3, [r7, #44]	; 0x2c
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 8000342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000344:	2b00      	cmp	r3, #0
 8000346:	d010      	beq.n	800036a <xEventGroupSetBits+0xec>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800034e:	2b00      	cmp	r3, #0
 8000350:	d003      	beq.n	800035a <xEventGroupSetBits+0xdc>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 8000352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000354:	69bb      	ldr	r3, [r7, #24]
 8000356:	4313      	orrs	r3, r2
 8000358:	633b      	str	r3, [r7, #48]	; 0x30
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800035a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000362:	4619      	mov	r1, r3
 8000364:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000366:	f001 f90b 	bl	8001580 <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 800036a:	69fb      	ldr	r3, [r7, #28]
 800036c:	637b      	str	r3, [r7, #52]	; 0x34
        while( pxListItem != pxListEnd )
 800036e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000370:	6a3b      	ldr	r3, [r7, #32]
 8000372:	429a      	cmp	r2, r3
 8000374:	d1be      	bne.n	80002f4 <xEventGroupSetBits+0x76>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8000376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800037c:	43db      	mvns	r3, r3
 800037e:	401a      	ands	r2, r3
 8000380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000382:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 8000384:	f000 fd84 	bl	8000e90 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 8000388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800038a:	681b      	ldr	r3, [r3, #0]
}
 800038c:	4618      	mov	r0, r3
 800038e:	3738      	adds	r7, #56	; 0x38
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	f103 0208 	add.w	r2, r3, #8
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	f04f 32ff 	mov.w	r2, #4294967295
 80003ac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	f103 0208 	add.w	r2, r3, #8
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	f103 0208 	add.w	r2, r3, #8
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr

080003d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr

080003ee <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80003ee:	b480      	push	{r7}
 80003f0:	b085      	sub	sp, #20
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	6078      	str	r0, [r7, #4]
 80003f6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000404:	d103      	bne.n	800040e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	691b      	ldr	r3, [r3, #16]
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	e00c      	b.n	8000428 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3308      	adds	r3, #8
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	e002      	b.n	800041c <vListInsert+0x2e>
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	68ba      	ldr	r2, [r7, #8]
 8000424:	429a      	cmp	r2, r3
 8000426:	d2f6      	bcs.n	8000416 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	685a      	ldr	r2, [r3, #4]
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	683a      	ldr	r2, [r7, #0]
 8000436:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	68fa      	ldr	r2, [r7, #12]
 800043c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	683a      	ldr	r2, [r7, #0]
 8000442:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	1c5a      	adds	r2, r3, #1
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	601a      	str	r2, [r3, #0]
}
 8000454:	bf00      	nop
 8000456:	3714      	adds	r7, #20
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	691b      	ldr	r3, [r3, #16]
 800046c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	6892      	ldr	r2, [r2, #8]
 8000476:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	6852      	ldr	r2, [r2, #4]
 8000480:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	429a      	cmp	r2, r3
 800048a:	d103      	bne.n	8000494 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	689a      	ldr	r2, [r3, #8]
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	1e5a      	subs	r2, r3, #1
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	681b      	ldr	r3, [r3, #0]
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3714      	adds	r7, #20
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr

080004b4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80004be:	2301      	movs	r3, #1
 80004c0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d10a      	bne.n	80004e2 <xQueueGenericReset+0x2e>
        __asm volatile
 80004cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80004d0:	f383 8811 	msr	BASEPRI, r3
 80004d4:	f3bf 8f6f 	isb	sy
 80004d8:	f3bf 8f4f 	dsb	sy
 80004dc:	60fb      	str	r3, [r7, #12]
    }
 80004de:	bf00      	nop
 80004e0:	e7fe      	b.n	80004e0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d05d      	beq.n	80005a4 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d059      	beq.n	80005a4 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80004f0:	693b      	ldr	r3, [r7, #16]
 80004f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004f4:	693b      	ldr	r3, [r7, #16]
 80004f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004f8:	2100      	movs	r1, #0
 80004fa:	fba3 2302 	umull	r2, r3, r3, r2
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d000      	beq.n	8000504 <xQueueGenericReset+0x50>
 8000502:	2101      	movs	r1, #1
 8000504:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000506:	2b00      	cmp	r3, #0
 8000508:	d14c      	bne.n	80005a4 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800050a:	f001 fc85 	bl	8001e18 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800050e:	693b      	ldr	r3, [r7, #16]
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000516:	6939      	ldr	r1, [r7, #16]
 8000518:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800051a:	fb01 f303 	mul.w	r3, r1, r3
 800051e:	441a      	add	r2, r3
 8000520:	693b      	ldr	r3, [r7, #16]
 8000522:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000524:	693b      	ldr	r3, [r7, #16]
 8000526:	2200      	movs	r2, #0
 8000528:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	693b      	ldr	r3, [r7, #16]
 8000530:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800053a:	3b01      	subs	r3, #1
 800053c:	6939      	ldr	r1, [r7, #16]
 800053e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000540:	fb01 f303 	mul.w	r3, r1, r3
 8000544:	441a      	add	r2, r3
 8000546:	693b      	ldr	r3, [r7, #16]
 8000548:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	22ff      	movs	r2, #255	; 0xff
 800054e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	22ff      	movs	r2, #255	; 0xff
 8000556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d114      	bne.n	800058a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	691b      	ldr	r3, [r3, #16]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d01a      	beq.n	800059e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000568:	693b      	ldr	r3, [r7, #16]
 800056a:	3310      	adds	r3, #16
 800056c:	4618      	mov	r0, r3
 800056e:	f000 ff31 	bl	80013d4 <xTaskRemoveFromEventList>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d012      	beq.n	800059e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000578:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <xQueueGenericReset+0x11c>)
 800057a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	f3bf 8f6f 	isb	sy
 8000588:	e009      	b.n	800059e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	3310      	adds	r3, #16
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ff00 	bl	8000394 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	3324      	adds	r3, #36	; 0x24
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff fefb 	bl	8000394 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800059e:	f001 fc6b 	bl	8001e78 <vPortExitCritical>
 80005a2:	e001      	b.n	80005a8 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d10a      	bne.n	80005c4 <xQueueGenericReset+0x110>
        __asm volatile
 80005ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b2:	f383 8811 	msr	BASEPRI, r3
 80005b6:	f3bf 8f6f 	isb	sy
 80005ba:	f3bf 8f4f 	dsb	sy
 80005be:	60bb      	str	r3, [r7, #8]
    }
 80005c0:	bf00      	nop
 80005c2:	e7fe      	b.n	80005c2 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80005c4:	697b      	ldr	r3, [r7, #20]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3718      	adds	r7, #24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	e000ed04 	.word	0xe000ed04

080005d4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af02      	add	r7, sp, #8
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	4613      	mov	r3, r2
 80005e0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d02e      	beq.n	800064a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80005ec:	2100      	movs	r1, #0
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	fba3 2302 	umull	r2, r3, r3, r2
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d000      	beq.n	80005fc <xQueueGenericCreate+0x28>
 80005fa:	2101      	movs	r1, #1
 80005fc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d123      	bne.n	800064a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	68ba      	ldr	r2, [r7, #8]
 8000606:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800060a:	f113 0f49 	cmn.w	r3, #73	; 0x49
 800060e:	d81c      	bhi.n	800064a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	fb02 f303 	mul.w	r3, r2, r3
 8000618:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800061a:	69bb      	ldr	r3, [r7, #24]
 800061c:	3348      	adds	r3, #72	; 0x48
 800061e:	4618      	mov	r0, r3
 8000620:	f001 fcd2 	bl	8001fc8 <pvPortMalloc>
 8000624:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d01c      	beq.n	8000666 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	3348      	adds	r3, #72	; 0x48
 8000634:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000636:	79fa      	ldrb	r2, [r7, #7]
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	4613      	mov	r3, r2
 800063e:	697a      	ldr	r2, [r7, #20]
 8000640:	68b9      	ldr	r1, [r7, #8]
 8000642:	68f8      	ldr	r0, [r7, #12]
 8000644:	f000 f814 	bl	8000670 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000648:	e00d      	b.n	8000666 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d10a      	bne.n	8000666 <xQueueGenericCreate+0x92>
        __asm volatile
 8000650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000654:	f383 8811 	msr	BASEPRI, r3
 8000658:	f3bf 8f6f 	isb	sy
 800065c:	f3bf 8f4f 	dsb	sy
 8000660:	613b      	str	r3, [r7, #16]
    }
 8000662:	bf00      	nop
 8000664:	e7fe      	b.n	8000664 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8000666:	69fb      	ldr	r3, [r7, #28]
    }
 8000668:	4618      	mov	r0, r3
 800066a:	3720      	adds	r7, #32
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
 800067c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d103      	bne.n	800068c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	69ba      	ldr	r2, [r7, #24]
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	e002      	b.n	8000692 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800068c:	69bb      	ldr	r3, [r7, #24]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	68fa      	ldr	r2, [r7, #12]
 8000696:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800069e:	2101      	movs	r1, #1
 80006a0:	69b8      	ldr	r0, [r7, #24]
 80006a2:	f7ff ff07 	bl	80004b4 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08c      	sub	sp, #48	; 0x30
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80006be:	2300      	movs	r3, #0
 80006c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 80006c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10a      	bne.n	80006e2 <xQueueGenericSend+0x32>
        __asm volatile
 80006cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d0:	f383 8811 	msr	BASEPRI, r3
 80006d4:	f3bf 8f6f 	isb	sy
 80006d8:	f3bf 8f4f 	dsb	sy
 80006dc:	623b      	str	r3, [r7, #32]
    }
 80006de:	bf00      	nop
 80006e0:	e7fe      	b.n	80006e0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d103      	bne.n	80006f0 <xQueueGenericSend+0x40>
 80006e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d101      	bne.n	80006f4 <xQueueGenericSend+0x44>
 80006f0:	2301      	movs	r3, #1
 80006f2:	e000      	b.n	80006f6 <xQueueGenericSend+0x46>
 80006f4:	2300      	movs	r3, #0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d10a      	bne.n	8000710 <xQueueGenericSend+0x60>
        __asm volatile
 80006fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006fe:	f383 8811 	msr	BASEPRI, r3
 8000702:	f3bf 8f6f 	isb	sy
 8000706:	f3bf 8f4f 	dsb	sy
 800070a:	61fb      	str	r3, [r7, #28]
    }
 800070c:	bf00      	nop
 800070e:	e7fe      	b.n	800070e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d103      	bne.n	800071e <xQueueGenericSend+0x6e>
 8000716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800071a:	2b01      	cmp	r3, #1
 800071c:	d101      	bne.n	8000722 <xQueueGenericSend+0x72>
 800071e:	2301      	movs	r3, #1
 8000720:	e000      	b.n	8000724 <xQueueGenericSend+0x74>
 8000722:	2300      	movs	r3, #0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d10a      	bne.n	800073e <xQueueGenericSend+0x8e>
        __asm volatile
 8000728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800072c:	f383 8811 	msr	BASEPRI, r3
 8000730:	f3bf 8f6f 	isb	sy
 8000734:	f3bf 8f4f 	dsb	sy
 8000738:	61bb      	str	r3, [r7, #24]
    }
 800073a:	bf00      	nop
 800073c:	e7fe      	b.n	800073c <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800073e:	f001 fb6b 	bl	8001e18 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800074a:	429a      	cmp	r2, r3
 800074c:	d302      	bcc.n	8000754 <xQueueGenericSend+0xa4>
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	2b02      	cmp	r3, #2
 8000752:	d129      	bne.n	80007a8 <xQueueGenericSend+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	68b9      	ldr	r1, [r7, #8]
 8000758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800075a:	f000 f88f 	bl	800087c <prvCopyDataToQueue>
 800075e:	6278      	str	r0, [r7, #36]	; 0x24

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000764:	2b00      	cmp	r3, #0
 8000766:	d010      	beq.n	800078a <xQueueGenericSend+0xda>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800076a:	3324      	adds	r3, #36	; 0x24
 800076c:	4618      	mov	r0, r3
 800076e:	f000 fe31 	bl	80013d4 <xTaskRemoveFromEventList>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d013      	beq.n	80007a0 <xQueueGenericSend+0xf0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000778:	4b3f      	ldr	r3, [pc, #252]	; (8000878 <xQueueGenericSend+0x1c8>)
 800077a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	f3bf 8f4f 	dsb	sy
 8000784:	f3bf 8f6f 	isb	sy
 8000788:	e00a      	b.n	80007a0 <xQueueGenericSend+0xf0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078c:	2b00      	cmp	r3, #0
 800078e:	d007      	beq.n	80007a0 <xQueueGenericSend+0xf0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000790:	4b39      	ldr	r3, [pc, #228]	; (8000878 <xQueueGenericSend+0x1c8>)
 8000792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	f3bf 8f4f 	dsb	sy
 800079c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80007a0:	f001 fb6a 	bl	8001e78 <vPortExitCritical>
                return pdPASS;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e063      	b.n	8000870 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d103      	bne.n	80007b6 <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80007ae:	f001 fb63 	bl	8001e78 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e05c      	b.n	8000870 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80007b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d106      	bne.n	80007ca <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80007bc:	f107 0310 	add.w	r3, r7, #16
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 ff9d 	bl	8001700 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80007c6:	2301      	movs	r3, #1
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80007ca:	f001 fb55 	bl	8001e78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80007ce:	f000 fb51 	bl	8000e74 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80007d2:	f001 fb21 	bl	8001e18 <vPortEnterCritical>
 80007d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80007dc:	b25b      	sxtb	r3, r3
 80007de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007e2:	d103      	bne.n	80007ec <xQueueGenericSend+0x13c>
 80007e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80007ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80007f2:	b25b      	sxtb	r3, r3
 80007f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f8:	d103      	bne.n	8000802 <xQueueGenericSend+0x152>
 80007fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000802:	f001 fb39 	bl	8001e78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000806:	1d3a      	adds	r2, r7, #4
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f000 ff8c 	bl	800172c <xTaskCheckForTimeOut>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d124      	bne.n	8000864 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800081a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800081c:	f000 f8ea 	bl	80009f4 <prvIsQueueFull>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d018      	beq.n	8000858 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000828:	3310      	adds	r3, #16
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	4611      	mov	r1, r2
 800082e:	4618      	mov	r0, r3
 8000830:	f000 fdac 	bl	800138c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8000834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000836:	f000 f88b 	bl	8000950 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800083a:	f000 fb29 	bl	8000e90 <xTaskResumeAll>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	f47f af7c 	bne.w	800073e <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <xQueueGenericSend+0x1c8>)
 8000848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	f3bf 8f4f 	dsb	sy
 8000852:	f3bf 8f6f 	isb	sy
 8000856:	e772      	b.n	800073e <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800085a:	f000 f879 	bl	8000950 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800085e:	f000 fb17 	bl	8000e90 <xTaskResumeAll>
 8000862:	e76c      	b.n	800073e <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8000864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000866:	f000 f873 	bl	8000950 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800086a:	f000 fb11 	bl	8000e90 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800086e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8000870:	4618      	mov	r0, r3
 8000872:	3730      	adds	r7, #48	; 0x30
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	e000ed04 	.word	0xe000ed04

0800087c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000890:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	2b00      	cmp	r3, #0
 8000898:	d10d      	bne.n	80008b6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d14d      	bne.n	800093e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 f864 	bl	8001974 <xTaskPriorityDisinherit>
 80008ac:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	e043      	b.n	800093e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d119      	bne.n	80008f0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	6858      	ldr	r0, [r3, #4]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	461a      	mov	r2, r3
 80008c6:	68b9      	ldr	r1, [r7, #8]
 80008c8:	f001 fee6 	bl	8002698 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	685a      	ldr	r2, [r3, #4]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	441a      	add	r2, r3
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	685a      	ldr	r2, [r3, #4]
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d32b      	bcc.n	800093e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	e026      	b.n	800093e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	68d8      	ldr	r0, [r3, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	461a      	mov	r2, r3
 80008fa:	68b9      	ldr	r1, [r7, #8]
 80008fc:	f001 fecc 	bl	8002698 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	68da      	ldr	r2, [r3, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	425b      	negs	r3, r3
 800090a:	441a      	add	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	68da      	ldr	r2, [r3, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	d207      	bcs.n	800092c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	425b      	negs	r3, r3
 8000926:	441a      	add	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b02      	cmp	r3, #2
 8000930:	d105      	bne.n	800093e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d002      	beq.n	800093e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	3b01      	subs	r3, #1
 800093c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	1c5a      	adds	r2, r3, #1
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8000946:	697b      	ldr	r3, [r7, #20]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000958:	f001 fa5e 	bl	8001e18 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000962:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000964:	e011      	b.n	800098a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096a:	2b00      	cmp	r3, #0
 800096c:	d012      	beq.n	8000994 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3324      	adds	r3, #36	; 0x24
 8000972:	4618      	mov	r0, r3
 8000974:	f000 fd2e 	bl	80013d4 <xTaskRemoveFromEventList>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800097e:	f000 ff3b 	bl	80017f8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	3b01      	subs	r3, #1
 8000986:	b2db      	uxtb	r3, r3
 8000988:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800098a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800098e:	2b00      	cmp	r3, #0
 8000990:	dce9      	bgt.n	8000966 <prvUnlockQueue+0x16>
 8000992:	e000      	b.n	8000996 <prvUnlockQueue+0x46>
                    break;
 8000994:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	22ff      	movs	r2, #255	; 0xff
 800099a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800099e:	f001 fa6b 	bl	8001e78 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80009a2:	f001 fa39 	bl	8001e18 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80009ac:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80009ae:	e011      	b.n	80009d4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d012      	beq.n	80009de <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3310      	adds	r3, #16
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 fd09 	bl	80013d4 <xTaskRemoveFromEventList>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80009c8:	f000 ff16 	bl	80017f8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80009cc:	7bbb      	ldrb	r3, [r7, #14]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80009d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	dce9      	bgt.n	80009b0 <prvUnlockQueue+0x60>
 80009dc:	e000      	b.n	80009e0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80009de:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	22ff      	movs	r2, #255	; 0xff
 80009e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80009e8:	f001 fa46 	bl	8001e78 <vPortExitCritical>
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80009fc:	f001 fa0c 	bl	8001e18 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d102      	bne.n	8000a12 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	e001      	b.n	8000a16 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8000a16:	f001 fa2f 	bl	8001e78 <vPortExitCritical>

    return xReturn;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af04      	add	r7, sp, #16
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	4613      	mov	r3, r2
 8000a32:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 fac5 	bl	8001fc8 <pvPortMalloc>
 8000a3e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d013      	beq.n	8000a6e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000a46:	2050      	movs	r0, #80	; 0x50
 8000a48:	f001 fabe 	bl	8001fc8 <pvPortMalloc>
 8000a4c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d008      	beq.n	8000a66 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000a54:	2250      	movs	r2, #80	; 0x50
 8000a56:	2100      	movs	r1, #0
 8000a58:	69f8      	ldr	r0, [r7, #28]
 8000a5a:	f001 fe2b 	bl	80026b4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	631a      	str	r2, [r3, #48]	; 0x30
 8000a64:	e005      	b.n	8000a72 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000a66:	6978      	ldr	r0, [r7, #20]
 8000a68:	f001 fb68 	bl	800213c <vPortFree>
 8000a6c:	e001      	b.n	8000a72 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d013      	beq.n	8000aa0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000a78:	88fa      	ldrh	r2, [r7, #6]
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	9303      	str	r3, [sp, #12]
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	9302      	str	r3, [sp, #8]
 8000a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a84:	9301      	str	r3, [sp, #4]
 8000a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	68b9      	ldr	r1, [r7, #8]
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f000 f80e 	bl	8000ab0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000a94:	69f8      	ldr	r0, [r7, #28]
 8000a96:	f000 f891 	bl	8000bbc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	e002      	b.n	8000aa6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000aa6:	69bb      	ldr	r3, [r7, #24]
    }
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3720      	adds	r7, #32
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	f023 0307 	bic.w	r3, r3, #7
 8000ad6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00a      	beq.n	8000af8 <prvInitialiseNewTask+0x48>
        __asm volatile
 8000ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ae6:	f383 8811 	msr	BASEPRI, r3
 8000aea:	f3bf 8f6f 	isb	sy
 8000aee:	f3bf 8f4f 	dsb	sy
 8000af2:	617b      	str	r3, [r7, #20]
    }
 8000af4:	bf00      	nop
 8000af6:	e7fe      	b.n	8000af6 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d01e      	beq.n	8000b3c <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
 8000b02:	e012      	b.n	8000b2a <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000b04:	68ba      	ldr	r2, [r7, #8]
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	4413      	add	r3, r2
 8000b0a:	7819      	ldrb	r1, [r3, #0]
 8000b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	4413      	add	r3, r2
 8000b12:	3334      	adds	r3, #52	; 0x34
 8000b14:	460a      	mov	r2, r1
 8000b16:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000b18:	68ba      	ldr	r2, [r7, #8]
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d006      	beq.n	8000b32 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	3301      	adds	r3, #1
 8000b28:	61fb      	str	r3, [r7, #28]
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	2b09      	cmp	r3, #9
 8000b2e:	d9e9      	bls.n	8000b04 <prvInitialiseNewTask+0x54>
 8000b30:	e000      	b.n	8000b34 <prvInitialiseNewTask+0x84>
            {
                break;
 8000b32:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d90a      	bls.n	8000b58 <prvInitialiseNewTask+0xa8>
        __asm volatile
 8000b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b46:	f383 8811 	msr	BASEPRI, r3
 8000b4a:	f3bf 8f6f 	isb	sy
 8000b4e:	f3bf 8f4f 	dsb	sy
 8000b52:	613b      	str	r3, [r7, #16]
    }
 8000b54:	bf00      	nop
 8000b56:	e7fe      	b.n	8000b56 <prvInitialiseNewTask+0xa6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	d901      	bls.n	8000b62 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b70:	3304      	adds	r3, #4
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fc2e 	bl	80003d4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b7a:	3318      	adds	r3, #24
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fc29 	bl	80003d4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b86:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b8a:	f1c3 0205 	rsb	r2, r3, #5
 8000b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b90:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b96:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	68f9      	ldr	r1, [r7, #12]
 8000b9c:	69b8      	ldr	r0, [r7, #24]
 8000b9e:	f001 f80d 	bl	8001bbc <pxPortInitialiseStack>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d002      	beq.n	8000bb4 <prvInitialiseNewTask+0x104>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bb2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000bb4:	bf00      	nop
 8000bb6:	3720      	adds	r7, #32
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000bc4:	f001 f928 	bl	8001e18 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000bc8:	4b3e      	ldr	r3, [pc, #248]	; (8000cc4 <prvAddNewTaskToReadyList+0x108>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	4a3d      	ldr	r2, [pc, #244]	; (8000cc4 <prvAddNewTaskToReadyList+0x108>)
 8000bd0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000bd2:	4b3d      	ldr	r3, [pc, #244]	; (8000cc8 <prvAddNewTaskToReadyList+0x10c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d109      	bne.n	8000bee <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000bda:	4a3b      	ldr	r2, [pc, #236]	; (8000cc8 <prvAddNewTaskToReadyList+0x10c>)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000be0:	4b38      	ldr	r3, [pc, #224]	; (8000cc4 <prvAddNewTaskToReadyList+0x108>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d110      	bne.n	8000c0a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000be8:	f000 fe2a 	bl	8001840 <prvInitialiseTaskLists>
 8000bec:	e00d      	b.n	8000c0a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000bee:	4b37      	ldr	r3, [pc, #220]	; (8000ccc <prvAddNewTaskToReadyList+0x110>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d109      	bne.n	8000c0a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000bf6:	4b34      	ldr	r3, [pc, #208]	; (8000cc8 <prvAddNewTaskToReadyList+0x10c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d802      	bhi.n	8000c0a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000c04:	4a30      	ldr	r2, [pc, #192]	; (8000cc8 <prvAddNewTaskToReadyList+0x10c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000c0a:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <prvAddNewTaskToReadyList+0x114>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	4a2f      	ldr	r2, [pc, #188]	; (8000cd0 <prvAddNewTaskToReadyList+0x114>)
 8000c12:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c18:	2201      	movs	r2, #1
 8000c1a:	409a      	lsls	r2, r3
 8000c1c:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <prvAddNewTaskToReadyList+0x118>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	4a2c      	ldr	r2, [pc, #176]	; (8000cd4 <prvAddNewTaskToReadyList+0x118>)
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c2a:	492b      	ldr	r1, [pc, #172]	; (8000cd8 <prvAddNewTaskToReadyList+0x11c>)
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	4413      	add	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	440b      	add	r3, r1
 8000c36:	3304      	adds	r3, #4
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	689a      	ldr	r2, [r3, #8]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	3204      	adds	r2, #4
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	1d1a      	adds	r2, r3, #4
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c60:	4613      	mov	r3, r2
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	4413      	add	r3, r2
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <prvAddNewTaskToReadyList+0x11c>)
 8000c6a:	441a      	add	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	615a      	str	r2, [r3, #20]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c74:	4918      	ldr	r1, [pc, #96]	; (8000cd8 <prvAddNewTaskToReadyList+0x11c>)
 8000c76:	4613      	mov	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	440b      	add	r3, r1
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	1c59      	adds	r1, r3, #1
 8000c84:	4814      	ldr	r0, [pc, #80]	; (8000cd8 <prvAddNewTaskToReadyList+0x11c>)
 8000c86:	4613      	mov	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	4413      	add	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4403      	add	r3, r0
 8000c90:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000c92:	f001 f8f1 	bl	8001e78 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <prvAddNewTaskToReadyList+0x110>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d00e      	beq.n	8000cbc <prvAddNewTaskToReadyList+0x100>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <prvAddNewTaskToReadyList+0x10c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d207      	bcs.n	8000cbc <prvAddNewTaskToReadyList+0x100>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <prvAddNewTaskToReadyList+0x120>)
 8000cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	f3bf 8f4f 	dsb	sy
 8000cb8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000100 	.word	0x20000100
 8000cc8:	20000028 	.word	0x20000028
 8000ccc:	2000010c 	.word	0x2000010c
 8000cd0:	2000011c 	.word	0x2000011c
 8000cd4:	20000108 	.word	0x20000108
 8000cd8:	2000002c 	.word	0x2000002c
 8000cdc:	e000ed04 	.word	0xe000ed04

08000ce0 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d10a      	bne.n	8000d0a <xTaskDelayUntil+0x2a>
        __asm volatile
 8000cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf8:	f383 8811 	msr	BASEPRI, r3
 8000cfc:	f3bf 8f6f 	isb	sy
 8000d00:	f3bf 8f4f 	dsb	sy
 8000d04:	617b      	str	r3, [r7, #20]
    }
 8000d06:	bf00      	nop
 8000d08:	e7fe      	b.n	8000d08 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10a      	bne.n	8000d26 <xTaskDelayUntil+0x46>
        __asm volatile
 8000d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d14:	f383 8811 	msr	BASEPRI, r3
 8000d18:	f3bf 8f6f 	isb	sy
 8000d1c:	f3bf 8f4f 	dsb	sy
 8000d20:	613b      	str	r3, [r7, #16]
    }
 8000d22:	bf00      	nop
 8000d24:	e7fe      	b.n	8000d24 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 8000d26:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <xTaskDelayUntil+0xf0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d00a      	beq.n	8000d44 <xTaskDelayUntil+0x64>
        __asm volatile
 8000d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d32:	f383 8811 	msr	BASEPRI, r3
 8000d36:	f3bf 8f6f 	isb	sy
 8000d3a:	f3bf 8f4f 	dsb	sy
 8000d3e:	60fb      	str	r3, [r7, #12]
    }
 8000d40:	bf00      	nop
 8000d42:	e7fe      	b.n	8000d42 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8000d44:	f000 f896 	bl	8000e74 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8000d48:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <xTaskDelayUntil+0xf4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	683a      	ldr	r2, [r7, #0]
 8000d54:	4413      	add	r3, r2
 8000d56:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6a3a      	ldr	r2, [r7, #32]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d20b      	bcs.n	8000d7a <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	69fa      	ldr	r2, [r7, #28]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d211      	bcs.n	8000d90 <xTaskDelayUntil+0xb0>
 8000d6c:	69fa      	ldr	r2, [r7, #28]
 8000d6e:	6a3b      	ldr	r3, [r7, #32]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d90d      	bls.n	8000d90 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8000d74:	2301      	movs	r3, #1
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
 8000d78:	e00a      	b.n	8000d90 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	69fa      	ldr	r2, [r7, #28]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d303      	bcc.n	8000d8c <xTaskDelayUntil+0xac>
 8000d84:	69fa      	ldr	r2, [r7, #28]
 8000d86:	6a3b      	ldr	r3, [r7, #32]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d901      	bls.n	8000d90 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	69fa      	ldr	r2, [r7, #28]
 8000d94:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d006      	beq.n	8000daa <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8000d9c:	69fa      	ldr	r2, [r7, #28]
 8000d9e:	6a3b      	ldr	r3, [r7, #32]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 fe89 	bl	8001abc <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8000daa:	f000 f871 	bl	8000e90 <xTaskResumeAll>
 8000dae:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d107      	bne.n	8000dc6 <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <xTaskDelayUntil+0xf8>)
 8000db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	f3bf 8f4f 	dsb	sy
 8000dc2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3728      	adds	r7, #40	; 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000128 	.word	0x20000128
 8000dd4:	20000104 	.word	0x20000104
 8000dd8:	e000ed04 	.word	0xe000ed04

08000ddc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <vTaskStartScheduler+0x7c>)
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	2300      	movs	r3, #0
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	2300      	movs	r3, #0
 8000dec:	2246      	movs	r2, #70	; 0x46
 8000dee:	491b      	ldr	r1, [pc, #108]	; (8000e5c <vTaskStartScheduler+0x80>)
 8000df0:	481b      	ldr	r0, [pc, #108]	; (8000e60 <vTaskStartScheduler+0x84>)
 8000df2:	f7ff fe17 	bl	8000a24 <xTaskCreate>
 8000df6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d116      	bne.n	8000e2c <vTaskStartScheduler+0x50>
        __asm volatile
 8000dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e02:	f383 8811 	msr	BASEPRI, r3
 8000e06:	f3bf 8f6f 	isb	sy
 8000e0a:	f3bf 8f4f 	dsb	sy
 8000e0e:	60bb      	str	r3, [r7, #8]
    }
 8000e10:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <vTaskStartScheduler+0x88>)
 8000e14:	f04f 32ff 	mov.w	r2, #4294967295
 8000e18:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <vTaskStartScheduler+0x8c>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <vTaskStartScheduler+0x90>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000e26:	f000 ff55 	bl	8001cd4 <xPortStartScheduler>
 8000e2a:	e00e      	b.n	8000e4a <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e32:	d10a      	bne.n	8000e4a <vTaskStartScheduler+0x6e>
        __asm volatile
 8000e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e38:	f383 8811 	msr	BASEPRI, r3
 8000e3c:	f3bf 8f6f 	isb	sy
 8000e40:	f3bf 8f4f 	dsb	sy
 8000e44:	607b      	str	r3, [r7, #4]
    }
 8000e46:	bf00      	nop
 8000e48:	e7fe      	b.n	8000e48 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <vTaskStartScheduler+0x94>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000124 	.word	0x20000124
 8000e5c:	080026dc 	.word	0x080026dc
 8000e60:	08001811 	.word	0x08001811
 8000e64:	20000120 	.word	0x20000120
 8000e68:	2000010c 	.word	0x2000010c
 8000e6c:	20000104 	.word	0x20000104
 8000e70:	20000000 	.word	0x20000000

08000e74 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <vTaskSuspendAll+0x18>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	4a03      	ldr	r2, [pc, #12]	; (8000e8c <vTaskSuspendAll+0x18>)
 8000e80:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	20000128 	.word	0x20000128

08000e90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000e9e:	4b71      	ldr	r3, [pc, #452]	; (8001064 <xTaskResumeAll+0x1d4>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10a      	bne.n	8000ebc <xTaskResumeAll+0x2c>
        __asm volatile
 8000ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eaa:	f383 8811 	msr	BASEPRI, r3
 8000eae:	f3bf 8f6f 	isb	sy
 8000eb2:	f3bf 8f4f 	dsb	sy
 8000eb6:	607b      	str	r3, [r7, #4]
    }
 8000eb8:	bf00      	nop
 8000eba:	e7fe      	b.n	8000eba <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000ebc:	f000 ffac 	bl	8001e18 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000ec0:	4b68      	ldr	r3, [pc, #416]	; (8001064 <xTaskResumeAll+0x1d4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	4a67      	ldr	r2, [pc, #412]	; (8001064 <xTaskResumeAll+0x1d4>)
 8000ec8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000eca:	4b66      	ldr	r3, [pc, #408]	; (8001064 <xTaskResumeAll+0x1d4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f040 80c0 	bne.w	8001054 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000ed4:	4b64      	ldr	r3, [pc, #400]	; (8001068 <xTaskResumeAll+0x1d8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80bb 	beq.w	8001054 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ede:	e08a      	b.n	8000ff6 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000ee0:	4b62      	ldr	r3, [pc, #392]	; (800106c <xTaskResumeAll+0x1dc>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	69fa      	ldr	r2, [r7, #28]
 8000ef4:	6a12      	ldr	r2, [r2, #32]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	69fa      	ldr	r2, [r7, #28]
 8000efe:	69d2      	ldr	r2, [r2, #28]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3318      	adds	r3, #24
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d103      	bne.n	8000f16 <xTaskResumeAll+0x86>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	6a1a      	ldr	r2, [r3, #32]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	629a      	str	r2, [r3, #40]	; 0x28
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	1e5a      	subs	r2, r3, #1
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	69fa      	ldr	r2, [r7, #28]
 8000f32:	68d2      	ldr	r2, [r2, #12]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	69fa      	ldr	r2, [r7, #28]
 8000f3c:	6892      	ldr	r2, [r2, #8]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	3304      	adds	r3, #4
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d103      	bne.n	8000f54 <xTaskResumeAll+0xc4>
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	1e5a      	subs	r2, r3, #1
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f68:	2201      	movs	r2, #1
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	4b40      	ldr	r3, [pc, #256]	; (8001070 <xTaskResumeAll+0x1e0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	4a3f      	ldr	r2, [pc, #252]	; (8001070 <xTaskResumeAll+0x1e0>)
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f7a:	493e      	ldr	r1, [pc, #248]	; (8001074 <xTaskResumeAll+0x1e4>)
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	440b      	add	r3, r1
 8000f86:	3304      	adds	r3, #4
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	69fa      	ldr	r2, [r7, #28]
 8000fa0:	3204      	adds	r2, #4
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	1d1a      	adds	r2, r3, #4
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4a2e      	ldr	r2, [pc, #184]	; (8001074 <xTaskResumeAll+0x1e4>)
 8000fba:	441a      	add	r2, r3
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	615a      	str	r2, [r3, #20]
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fc4:	492b      	ldr	r1, [pc, #172]	; (8001074 <xTaskResumeAll+0x1e4>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	1c59      	adds	r1, r3, #1
 8000fd4:	4827      	ldr	r0, [pc, #156]	; (8001074 <xTaskResumeAll+0x1e4>)
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4403      	add	r3, r0
 8000fe0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fe6:	4b24      	ldr	r3, [pc, #144]	; (8001078 <xTaskResumeAll+0x1e8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d302      	bcc.n	8000ff6 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8000ff0:	4b22      	ldr	r3, [pc, #136]	; (800107c <xTaskResumeAll+0x1ec>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <xTaskResumeAll+0x1dc>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f47f af70 	bne.w	8000ee0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001006:	f000 fc99 	bl	800193c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <xTaskResumeAll+0x1f0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d010      	beq.n	8001038 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001016:	f000 f847 	bl	80010a8 <xTaskIncrementTick>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d002      	beq.n	8001026 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <xTaskResumeAll+0x1ec>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3b01      	subs	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f1      	bne.n	8001016 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <xTaskResumeAll+0x1f0>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <xTaskResumeAll+0x1ec>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d009      	beq.n	8001054 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8001040:	2301      	movs	r3, #1
 8001042:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001044:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <xTaskResumeAll+0x1f4>)
 8001046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	f3bf 8f4f 	dsb	sy
 8001050:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001054:	f000 ff10 	bl	8001e78 <vPortExitCritical>

    return xAlreadyYielded;
 8001058:	69bb      	ldr	r3, [r7, #24]
}
 800105a:	4618      	mov	r0, r3
 800105c:	3720      	adds	r7, #32
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000128 	.word	0x20000128
 8001068:	20000100 	.word	0x20000100
 800106c:	200000c0 	.word	0x200000c0
 8001070:	20000108 	.word	0x20000108
 8001074:	2000002c 	.word	0x2000002c
 8001078:	20000028 	.word	0x20000028
 800107c:	20000114 	.word	0x20000114
 8001080:	20000110 	.word	0x20000110
 8001084:	e000ed04 	.word	0xe000ed04

08001088 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <xTaskGetTickCount+0x1c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001094:	687b      	ldr	r3, [r7, #4]
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000104 	.word	0x20000104

080010a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80010b2:	4b7d      	ldr	r3, [pc, #500]	; (80012a8 <xTaskIncrementTick+0x200>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f040 80ec 	bne.w	8001294 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80010bc:	4b7b      	ldr	r3, [pc, #492]	; (80012ac <xTaskIncrementTick+0x204>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	3301      	adds	r3, #1
 80010c2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80010c4:	4a79      	ldr	r2, [pc, #484]	; (80012ac <xTaskIncrementTick+0x204>)
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80010ca:	6a3b      	ldr	r3, [r7, #32]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d120      	bne.n	8001112 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80010d0:	4b77      	ldr	r3, [pc, #476]	; (80012b0 <xTaskIncrementTick+0x208>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00a      	beq.n	80010f0 <xTaskIncrementTick+0x48>
        __asm volatile
 80010da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010de:	f383 8811 	msr	BASEPRI, r3
 80010e2:	f3bf 8f6f 	isb	sy
 80010e6:	f3bf 8f4f 	dsb	sy
 80010ea:	607b      	str	r3, [r7, #4]
    }
 80010ec:	bf00      	nop
 80010ee:	e7fe      	b.n	80010ee <xTaskIncrementTick+0x46>
 80010f0:	4b6f      	ldr	r3, [pc, #444]	; (80012b0 <xTaskIncrementTick+0x208>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	61fb      	str	r3, [r7, #28]
 80010f6:	4b6f      	ldr	r3, [pc, #444]	; (80012b4 <xTaskIncrementTick+0x20c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a6d      	ldr	r2, [pc, #436]	; (80012b0 <xTaskIncrementTick+0x208>)
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4a6d      	ldr	r2, [pc, #436]	; (80012b4 <xTaskIncrementTick+0x20c>)
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b6c      	ldr	r3, [pc, #432]	; (80012b8 <xTaskIncrementTick+0x210>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	3301      	adds	r3, #1
 800110a:	4a6b      	ldr	r2, [pc, #428]	; (80012b8 <xTaskIncrementTick+0x210>)
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	f000 fc15 	bl	800193c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001112:	4b6a      	ldr	r3, [pc, #424]	; (80012bc <xTaskIncrementTick+0x214>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6a3a      	ldr	r2, [r7, #32]
 8001118:	429a      	cmp	r2, r3
 800111a:	f0c0 80a6 	bcc.w	800126a <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800111e:	4b64      	ldr	r3, [pc, #400]	; (80012b0 <xTaskIncrementTick+0x208>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d104      	bne.n	8001132 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001128:	4b64      	ldr	r3, [pc, #400]	; (80012bc <xTaskIncrementTick+0x214>)
 800112a:	f04f 32ff 	mov.w	r2, #4294967295
 800112e:	601a      	str	r2, [r3, #0]
                    break;
 8001130:	e09b      	b.n	800126a <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001132:	4b5f      	ldr	r3, [pc, #380]	; (80012b0 <xTaskIncrementTick+0x208>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001142:	6a3a      	ldr	r2, [r7, #32]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	429a      	cmp	r2, r3
 8001148:	d203      	bcs.n	8001152 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800114a:	4a5c      	ldr	r2, [pc, #368]	; (80012bc <xTaskIncrementTick+0x214>)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001150:	e08b      	b.n	800126a <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	68d2      	ldr	r2, [r2, #12]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	6892      	ldr	r2, [r2, #8]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	3304      	adds	r3, #4
 8001174:	429a      	cmp	r2, r3
 8001176:	d103      	bne.n	8001180 <xTaskIncrementTick+0xd8>
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	1e5a      	subs	r2, r3, #1
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001194:	2b00      	cmp	r3, #0
 8001196:	d01e      	beq.n	80011d6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	6a12      	ldr	r2, [r2, #32]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	69d2      	ldr	r2, [r2, #28]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	3318      	adds	r3, #24
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d103      	bne.n	80011c6 <xTaskIncrementTick+0x11e>
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	6a1a      	ldr	r2, [r3, #32]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	2200      	movs	r2, #0
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	1e5a      	subs	r2, r3, #1
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011da:	2201      	movs	r2, #1
 80011dc:	409a      	lsls	r2, r3
 80011de:	4b38      	ldr	r3, [pc, #224]	; (80012c0 <xTaskIncrementTick+0x218>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	4a36      	ldr	r2, [pc, #216]	; (80012c0 <xTaskIncrementTick+0x218>)
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011ec:	4935      	ldr	r1, [pc, #212]	; (80012c4 <xTaskIncrementTick+0x21c>)
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	3304      	adds	r3, #4
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	3204      	adds	r2, #4
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	1d1a      	adds	r2, r3, #4
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4a26      	ldr	r2, [pc, #152]	; (80012c4 <xTaskIncrementTick+0x21c>)
 800122c:	441a      	add	r2, r3
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001236:	4923      	ldr	r1, [pc, #140]	; (80012c4 <xTaskIncrementTick+0x21c>)
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	1c59      	adds	r1, r3, #1
 8001246:	481f      	ldr	r0, [pc, #124]	; (80012c4 <xTaskIncrementTick+0x21c>)
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4403      	add	r3, r0
 8001252:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <xTaskIncrementTick+0x220>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125e:	429a      	cmp	r2, r3
 8001260:	f67f af5d 	bls.w	800111e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8001264:	2301      	movs	r3, #1
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001268:	e759      	b.n	800111e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800126a:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <xTaskIncrementTick+0x220>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001270:	4914      	ldr	r1, [pc, #80]	; (80012c4 <xTaskIncrementTick+0x21c>)
 8001272:	4613      	mov	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	440b      	add	r3, r1
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d901      	bls.n	8001286 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8001282:	2301      	movs	r3, #1
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <xTaskIncrementTick+0x224>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d007      	beq.n	800129e <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 800128e:	2301      	movs	r3, #1
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
 8001292:	e004      	b.n	800129e <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <xTaskIncrementTick+0x228>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <xTaskIncrementTick+0x228>)
 800129c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000128 	.word	0x20000128
 80012ac:	20000104 	.word	0x20000104
 80012b0:	200000b8 	.word	0x200000b8
 80012b4:	200000bc 	.word	0x200000bc
 80012b8:	20000118 	.word	0x20000118
 80012bc:	20000120 	.word	0x20000120
 80012c0:	20000108 	.word	0x20000108
 80012c4:	2000002c 	.word	0x2000002c
 80012c8:	20000028 	.word	0x20000028
 80012cc:	20000114 	.word	0x20000114
 80012d0:	20000110 	.word	0x20000110

080012d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80012da:	4b27      	ldr	r3, [pc, #156]	; (8001378 <vTaskSwitchContext+0xa4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80012e2:	4b26      	ldr	r3, [pc, #152]	; (800137c <vTaskSwitchContext+0xa8>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80012e8:	e03f      	b.n	800136a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <vTaskSwitchContext+0xa8>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80012f0:	4b23      	ldr	r3, [pc, #140]	; (8001380 <vTaskSwitchContext+0xac>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	fab3 f383 	clz	r3, r3
 80012fc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80012fe:	7afb      	ldrb	r3, [r7, #11]
 8001300:	f1c3 031f 	rsb	r3, r3, #31
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	491f      	ldr	r1, [pc, #124]	; (8001384 <vTaskSwitchContext+0xb0>)
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	440b      	add	r3, r1
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10a      	bne.n	8001330 <vTaskSwitchContext+0x5c>
        __asm volatile
 800131a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800131e:	f383 8811 	msr	BASEPRI, r3
 8001322:	f3bf 8f6f 	isb	sy
 8001326:	f3bf 8f4f 	dsb	sy
 800132a:	607b      	str	r3, [r7, #4]
    }
 800132c:	bf00      	nop
 800132e:	e7fe      	b.n	800132e <vTaskSwitchContext+0x5a>
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4a12      	ldr	r2, [pc, #72]	; (8001384 <vTaskSwitchContext+0xb0>)
 800133c:	4413      	add	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	3308      	adds	r3, #8
 8001352:	429a      	cmp	r2, r3
 8001354:	d104      	bne.n	8001360 <vTaskSwitchContext+0x8c>
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	4a08      	ldr	r2, [pc, #32]	; (8001388 <vTaskSwitchContext+0xb4>)
 8001368:	6013      	str	r3, [r2, #0]
}
 800136a:	bf00      	nop
 800136c:	371c      	adds	r7, #28
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000128 	.word	0x20000128
 800137c:	20000114 	.word	0x20000114
 8001380:	20000108 	.word	0x20000108
 8001384:	2000002c 	.word	0x2000002c
 8001388:	20000028 	.word	0x20000028

0800138c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d10a      	bne.n	80013b2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800139c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013a0:	f383 8811 	msr	BASEPRI, r3
 80013a4:	f3bf 8f6f 	isb	sy
 80013a8:	f3bf 8f4f 	dsb	sy
 80013ac:	60fb      	str	r3, [r7, #12]
    }
 80013ae:	bf00      	nop
 80013b0:	e7fe      	b.n	80013b0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <vTaskPlaceOnEventList+0x44>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3318      	adds	r3, #24
 80013b8:	4619      	mov	r1, r3
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff f817 	bl	80003ee <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80013c0:	2101      	movs	r1, #1
 80013c2:	6838      	ldr	r0, [r7, #0]
 80013c4:	f000 fb7a 	bl	8001abc <prvAddCurrentTaskToDelayedList>
}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000028 	.word	0x20000028

080013d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80013d4:	b480      	push	{r7}
 80013d6:	b08b      	sub	sp, #44	; 0x2c
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80013e4:	6a3b      	ldr	r3, [r7, #32]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10a      	bne.n	8001400 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80013ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ee:	f383 8811 	msr	BASEPRI, r3
 80013f2:	f3bf 8f6f 	isb	sy
 80013f6:	f3bf 8f4f 	dsb	sy
 80013fa:	60fb      	str	r3, [r7, #12]
    }
 80013fc:	bf00      	nop
 80013fe:	e7fe      	b.n	80013fe <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001404:	61fb      	str	r3, [r7, #28]
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	6a3a      	ldr	r2, [r7, #32]
 800140c:	6a12      	ldr	r2, [r2, #32]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	6a3b      	ldr	r3, [r7, #32]
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	6a3a      	ldr	r2, [r7, #32]
 8001416:	69d2      	ldr	r2, [r2, #28]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	3318      	adds	r3, #24
 8001422:	429a      	cmp	r2, r3
 8001424:	d103      	bne.n	800142e <xTaskRemoveFromEventList+0x5a>
 8001426:	6a3b      	ldr	r3, [r7, #32]
 8001428:	6a1a      	ldr	r2, [r3, #32]
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	2200      	movs	r2, #0
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	1e5a      	subs	r2, r3, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800143e:	4b4a      	ldr	r3, [pc, #296]	; (8001568 <xTaskRemoveFromEventList+0x194>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d15e      	bne.n	8001504 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	6a3a      	ldr	r2, [r7, #32]
 8001452:	68d2      	ldr	r2, [r2, #12]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	6a3a      	ldr	r2, [r7, #32]
 800145c:	6892      	ldr	r2, [r2, #8]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	3304      	adds	r3, #4
 8001468:	429a      	cmp	r2, r3
 800146a:	d103      	bne.n	8001474 <xTaskRemoveFromEventList+0xa0>
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	2200      	movs	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	1e5a      	subs	r2, r3, #1
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	2201      	movs	r2, #1
 800148a:	409a      	lsls	r2, r3
 800148c:	4b37      	ldr	r3, [pc, #220]	; (800156c <xTaskRemoveFromEventList+0x198>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4313      	orrs	r3, r2
 8001492:	4a36      	ldr	r2, [pc, #216]	; (800156c <xTaskRemoveFromEventList+0x198>)
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800149a:	4935      	ldr	r1, [pc, #212]	; (8001570 <xTaskRemoveFromEventList+0x19c>)
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	3304      	adds	r3, #4
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	6a3b      	ldr	r3, [r7, #32]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	6a3a      	ldr	r2, [r7, #32]
 80014c0:	3204      	adds	r2, #4
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	6a3b      	ldr	r3, [r7, #32]
 80014c6:	1d1a      	adds	r2, r3, #4
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	6a3b      	ldr	r3, [r7, #32]
 80014ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4a25      	ldr	r2, [pc, #148]	; (8001570 <xTaskRemoveFromEventList+0x19c>)
 80014da:	441a      	add	r2, r3
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	615a      	str	r2, [r3, #20]
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e4:	4922      	ldr	r1, [pc, #136]	; (8001570 <xTaskRemoveFromEventList+0x19c>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	1c59      	adds	r1, r3, #1
 80014f4:	481e      	ldr	r0, [pc, #120]	; (8001570 <xTaskRemoveFromEventList+0x19c>)
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4403      	add	r3, r0
 8001500:	6019      	str	r1, [r3, #0]
 8001502:	e01b      	b.n	800153c <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <xTaskRemoveFromEventList+0x1a0>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	61bb      	str	r3, [r7, #24]
 800150a:	6a3b      	ldr	r3, [r7, #32]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	61da      	str	r2, [r3, #28]
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	621a      	str	r2, [r3, #32]
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	6a3a      	ldr	r2, [r7, #32]
 800151e:	3218      	adds	r2, #24
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	f103 0218 	add.w	r2, r3, #24
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	4a11      	ldr	r2, [pc, #68]	; (8001574 <xTaskRemoveFromEventList+0x1a0>)
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <xTaskRemoveFromEventList+0x1a0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	3301      	adds	r3, #1
 8001538:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <xTaskRemoveFromEventList+0x1a0>)
 800153a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <xTaskRemoveFromEventList+0x1a4>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	429a      	cmp	r2, r3
 8001548:	d905      	bls.n	8001556 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800154a:	2301      	movs	r3, #1
 800154c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <xTaskRemoveFromEventList+0x1a8>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	e001      	b.n	800155a <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800155c:	4618      	mov	r0, r3
 800155e:	372c      	adds	r7, #44	; 0x2c
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	20000128 	.word	0x20000128
 800156c:	20000108 	.word	0x20000108
 8001570:	2000002c 	.word	0x2000002c
 8001574:	200000c0 	.word	0x200000c0
 8001578:	20000028 	.word	0x20000028
 800157c:	20000114 	.word	0x20000114

08001580 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	; 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
    TCB_t * pxUnblockedTCB;

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );
 800158a:	4b58      	ldr	r3, [pc, #352]	; (80016ec <vTaskRemoveFromUnorderedEventList+0x16c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10a      	bne.n	80015a8 <vTaskRemoveFromUnorderedEventList+0x28>
        __asm volatile
 8001592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001596:	f383 8811 	msr	BASEPRI, r3
 800159a:	f3bf 8f6f 	isb	sy
 800159e:	f3bf 8f4f 	dsb	sy
 80015a2:	60fb      	str	r3, [r7, #12]
    }
 80015a4:	bf00      	nop
 80015a6:	e7fe      	b.n	80015a6 <vTaskRemoveFromUnorderedEventList+0x26>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	601a      	str	r2, [r3, #0]

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	61fb      	str	r3, [r7, #28]
    configASSERT( pxUnblockedTCB );
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10a      	bne.n	80015d4 <vTaskRemoveFromUnorderedEventList+0x54>
        __asm volatile
 80015be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c2:	f383 8811 	msr	BASEPRI, r3
 80015c6:	f3bf 8f6f 	isb	sy
 80015ca:	f3bf 8f4f 	dsb	sy
 80015ce:	60bb      	str	r3, [r7, #8]
    }
 80015d0:	bf00      	nop
 80015d2:	e7fe      	b.n	80015d2 <vTaskRemoveFromUnorderedEventList+0x52>
    listREMOVE_ITEM( pxEventListItem );
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6892      	ldr	r2, [r2, #8]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6852      	ldr	r2, [r2, #4]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d103      	bne.n	8001600 <vTaskRemoveFromUnorderedEventList+0x80>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	1e5a      	subs	r2, r3, #1
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	68d2      	ldr	r2, [r2, #12]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	69fa      	ldr	r2, [r7, #28]
 8001626:	6892      	ldr	r2, [r2, #8]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3304      	adds	r3, #4
 8001632:	429a      	cmp	r2, r3
 8001634:	d103      	bne.n	800163e <vTaskRemoveFromUnorderedEventList+0xbe>
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	1e5a      	subs	r2, r3, #1
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001652:	2201      	movs	r2, #1
 8001654:	409a      	lsls	r2, r3
 8001656:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <vTaskRemoveFromUnorderedEventList+0x170>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4313      	orrs	r3, r2
 800165c:	4a24      	ldr	r2, [pc, #144]	; (80016f0 <vTaskRemoveFromUnorderedEventList+0x170>)
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001664:	4923      	ldr	r1, [pc, #140]	; (80016f4 <vTaskRemoveFromUnorderedEventList+0x174>)
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	3304      	adds	r3, #4
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	3204      	adds	r2, #4
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	1d1a      	adds	r2, r3, #4
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <vTaskRemoveFromUnorderedEventList+0x174>)
 80016a4:	441a      	add	r2, r3
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	615a      	str	r2, [r3, #20]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ae:	4911      	ldr	r1, [pc, #68]	; (80016f4 <vTaskRemoveFromUnorderedEventList+0x174>)
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	1c59      	adds	r1, r3, #1
 80016be:	480d      	ldr	r0, [pc, #52]	; (80016f4 <vTaskRemoveFromUnorderedEventList+0x174>)
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4403      	add	r3, r0
 80016ca:	6019      	str	r1, [r3, #0]

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <vTaskRemoveFromUnorderedEventList+0x178>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d902      	bls.n	80016e0 <vTaskRemoveFromUnorderedEventList+0x160>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <vTaskRemoveFromUnorderedEventList+0x17c>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]
    }
}
 80016e0:	bf00      	nop
 80016e2:	3724      	adds	r7, #36	; 0x24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	20000128 	.word	0x20000128
 80016f0:	20000108 	.word	0x20000108
 80016f4:	2000002c 	.word	0x2000002c
 80016f8:	20000028 	.word	0x20000028
 80016fc:	20000114 	.word	0x20000114

08001700 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <vTaskInternalSetTimeOutState+0x24>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <vTaskInternalSetTimeOutState+0x28>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	605a      	str	r2, [r3, #4]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	20000118 	.word	0x20000118
 8001728:	20000104 	.word	0x20000104

0800172c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10a      	bne.n	8001752 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800173c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001740:	f383 8811 	msr	BASEPRI, r3
 8001744:	f3bf 8f6f 	isb	sy
 8001748:	f3bf 8f4f 	dsb	sy
 800174c:	613b      	str	r3, [r7, #16]
    }
 800174e:	bf00      	nop
 8001750:	e7fe      	b.n	8001750 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d10a      	bne.n	800176e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8001758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800175c:	f383 8811 	msr	BASEPRI, r3
 8001760:	f3bf 8f6f 	isb	sy
 8001764:	f3bf 8f4f 	dsb	sy
 8001768:	60fb      	str	r3, [r7, #12]
    }
 800176a:	bf00      	nop
 800176c:	e7fe      	b.n	800176c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800176e:	f000 fb53 	bl	8001e18 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001772:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <xTaskCheckForTimeOut+0xc4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178a:	d102      	bne.n	8001792 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
 8001790:	e026      	b.n	80017e0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <xTaskCheckForTimeOut+0xc8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d00a      	beq.n	80017b4 <xTaskCheckForTimeOut+0x88>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d305      	bcc.n	80017b4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80017a8:	2301      	movs	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	e015      	b.n	80017e0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d20b      	bcs.n	80017d6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	1ad2      	subs	r2, r2, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ff98 	bl	8001700 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
 80017d4:	e004      	b.n	80017e0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80017dc:	2301      	movs	r3, #1
 80017de:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80017e0:	f000 fb4a 	bl	8001e78 <vPortExitCritical>

    return xReturn;
 80017e4:	69fb      	ldr	r3, [r7, #28]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3720      	adds	r7, #32
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000104 	.word	0x20000104
 80017f4:	20000118 	.word	0x20000118

080017f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <vTaskMissedYield+0x14>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	20000114 	.word	0x20000114

08001810 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8001818:	f000 f852 	bl	80018c0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <prvIdleTask+0x28>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d9f9      	bls.n	8001818 <prvIdleTask+0x8>
            {
                taskYIELD();
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <prvIdleTask+0x2c>)
 8001826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	f3bf 8f4f 	dsb	sy
 8001830:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001834:	e7f0      	b.n	8001818 <prvIdleTask+0x8>
 8001836:	bf00      	nop
 8001838:	2000002c 	.word	0x2000002c
 800183c:	e000ed04 	.word	0xe000ed04

08001840 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	e00c      	b.n	8001866 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <prvInitialiseTaskLists+0x60>)
 8001858:	4413      	add	r3, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fd9a 	bl	8000394 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3301      	adds	r3, #1
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b04      	cmp	r3, #4
 800186a:	d9ef      	bls.n	800184c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800186c:	480d      	ldr	r0, [pc, #52]	; (80018a4 <prvInitialiseTaskLists+0x64>)
 800186e:	f7fe fd91 	bl	8000394 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001872:	480d      	ldr	r0, [pc, #52]	; (80018a8 <prvInitialiseTaskLists+0x68>)
 8001874:	f7fe fd8e 	bl	8000394 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001878:	480c      	ldr	r0, [pc, #48]	; (80018ac <prvInitialiseTaskLists+0x6c>)
 800187a:	f7fe fd8b 	bl	8000394 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800187e:	480c      	ldr	r0, [pc, #48]	; (80018b0 <prvInitialiseTaskLists+0x70>)
 8001880:	f7fe fd88 	bl	8000394 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001884:	480b      	ldr	r0, [pc, #44]	; (80018b4 <prvInitialiseTaskLists+0x74>)
 8001886:	f7fe fd85 	bl	8000394 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <prvInitialiseTaskLists+0x78>)
 800188c:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <prvInitialiseTaskLists+0x64>)
 800188e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <prvInitialiseTaskLists+0x7c>)
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <prvInitialiseTaskLists+0x68>)
 8001894:	601a      	str	r2, [r3, #0]
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2000002c 	.word	0x2000002c
 80018a4:	20000090 	.word	0x20000090
 80018a8:	200000a4 	.word	0x200000a4
 80018ac:	200000c0 	.word	0x200000c0
 80018b0:	200000d4 	.word	0x200000d4
 80018b4:	200000ec 	.word	0x200000ec
 80018b8:	200000b8 	.word	0x200000b8
 80018bc:	200000bc 	.word	0x200000bc

080018c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80018c6:	e019      	b.n	80018fc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80018c8:	f000 faa6 	bl	8001e18 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80018cc:	4b10      	ldr	r3, [pc, #64]	; (8001910 <prvCheckTasksWaitingTermination+0x50>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3304      	adds	r3, #4
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fdc1 	bl	8000460 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <prvCheckTasksWaitingTermination+0x54>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <prvCheckTasksWaitingTermination+0x54>)
 80018e6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <prvCheckTasksWaitingTermination+0x58>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <prvCheckTasksWaitingTermination+0x58>)
 80018f0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80018f2:	f000 fac1 	bl	8001e78 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f810 	bl	800191c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <prvCheckTasksWaitingTermination+0x58>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1e1      	bne.n	80018c8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200000d4 	.word	0x200000d4
 8001914:	20000100 	.word	0x20000100
 8001918:	200000e8 	.word	0x200000e8

0800191c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	4618      	mov	r0, r3
 800192a:	f000 fc07 	bl	800213c <vPortFree>
            vPortFree( pxTCB );
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 fc04 	bl	800213c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <prvResetNextTaskUnblockTime+0x30>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d104      	bne.n	8001954 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <prvResetNextTaskUnblockTime+0x34>)
 800194c:	f04f 32ff 	mov.w	r2, #4294967295
 8001950:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001952:	e005      	b.n	8001960 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001954:	4b05      	ldr	r3, [pc, #20]	; (800196c <prvResetNextTaskUnblockTime+0x30>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <prvResetNextTaskUnblockTime+0x34>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	200000b8 	.word	0x200000b8
 8001970:	20000120 	.word	0x20000120

08001974 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 808c 	beq.w	8001aa4 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800198c:	4b48      	ldr	r3, [pc, #288]	; (8001ab0 <xTaskPriorityDisinherit+0x13c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	429a      	cmp	r2, r3
 8001994:	d00a      	beq.n	80019ac <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8001996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800199a:	f383 8811 	msr	BASEPRI, r3
 800199e:	f3bf 8f6f 	isb	sy
 80019a2:	f3bf 8f4f 	dsb	sy
 80019a6:	613b      	str	r3, [r7, #16]
    }
 80019a8:	bf00      	nop
 80019aa:	e7fe      	b.n	80019aa <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10a      	bne.n	80019ca <xTaskPriorityDisinherit+0x56>
        __asm volatile
 80019b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019b8:	f383 8811 	msr	BASEPRI, r3
 80019bc:	f3bf 8f6f 	isb	sy
 80019c0:	f3bf 8f4f 	dsb	sy
 80019c4:	60fb      	str	r3, [r7, #12]
    }
 80019c6:	bf00      	nop
 80019c8:	e7fe      	b.n	80019c8 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	1e5a      	subs	r2, r3, #1
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	429a      	cmp	r2, r3
 80019de:	d061      	beq.n	8001aa4 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d15d      	bne.n	8001aa4 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	3304      	adds	r3, #4
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fd37 	bl	8000460 <uxListRemove>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10a      	bne.n	8001a0e <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	2201      	movs	r2, #1
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <xTaskPriorityDisinherit+0x140>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	4a2a      	ldr	r2, [pc, #168]	; (8001ab4 <xTaskPriorityDisinherit+0x140>)
 8001a0c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	f1c3 0205 	rsb	r2, r3, #5
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	2201      	movs	r2, #1
 8001a28:	409a      	lsls	r2, r3
 8001a2a:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <xTaskPriorityDisinherit+0x140>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	4a20      	ldr	r2, [pc, #128]	; (8001ab4 <xTaskPriorityDisinherit+0x140>)
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a38:	491f      	ldr	r1, [pc, #124]	; (8001ab8 <xTaskPriorityDisinherit+0x144>)
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	440b      	add	r3, r1
 8001a44:	3304      	adds	r3, #4
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	3204      	adds	r2, #4
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	1d1a      	adds	r2, r3, #4
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <xTaskPriorityDisinherit+0x144>)
 8001a78:	441a      	add	r2, r3
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	615a      	str	r2, [r3, #20]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a82:	490d      	ldr	r1, [pc, #52]	; (8001ab8 <xTaskPriorityDisinherit+0x144>)
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	1c59      	adds	r1, r3, #1
 8001a92:	4809      	ldr	r0, [pc, #36]	; (8001ab8 <xTaskPriorityDisinherit+0x144>)
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4403      	add	r3, r0
 8001a9e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8001aa4:	69fb      	ldr	r3, [r7, #28]
    }
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3720      	adds	r7, #32
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000028 	.word	0x20000028
 8001ab4:	20000108 	.word	0x20000108
 8001ab8:	2000002c 	.word	0x2000002c

08001abc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8001ac6:	4b36      	ldr	r3, [pc, #216]	; (8001ba0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001acc:	4b35      	ldr	r3, [pc, #212]	; (8001ba4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fcc4 	bl	8000460 <uxListRemove>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10b      	bne.n	8001af6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001ade:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43da      	mvns	r2, r3
 8001aec:	4b2e      	ldr	r3, [pc, #184]	; (8001ba8 <prvAddCurrentTaskToDelayedList+0xec>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4013      	ands	r3, r2
 8001af2:	4a2d      	ldr	r2, [pc, #180]	; (8001ba8 <prvAddCurrentTaskToDelayedList+0xec>)
 8001af4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afc:	d124      	bne.n	8001b48 <prvAddCurrentTaskToDelayedList+0x8c>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d021      	beq.n	8001b48 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b04:	4b29      	ldr	r3, [pc, #164]	; (8001bac <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	6892      	ldr	r2, [r2, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	3204      	adds	r2, #4
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	1d1a      	adds	r2, r3, #4
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a1d      	ldr	r2, [pc, #116]	; (8001bac <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b38:	615a      	str	r2, [r3, #20]
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	4a1a      	ldr	r2, [pc, #104]	; (8001bac <prvAddCurrentTaskToDelayedList+0xf0>)
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001b46:	e026      	b.n	8001b96 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d209      	bcs.n	8001b74 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	f7fe fc3e 	bl	80003ee <vListInsert>
}
 8001b72:	e010      	b.n	8001b96 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4610      	mov	r0, r2
 8001b82:	f7fe fc34 	bl	80003ee <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d202      	bcs.n	8001b96 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001b90:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6013      	str	r3, [r2, #0]
}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000104 	.word	0x20000104
 8001ba4:	20000028 	.word	0x20000028
 8001ba8:	20000108 	.word	0x20000108
 8001bac:	200000ec 	.word	0x200000ec
 8001bb0:	200000bc 	.word	0x200000bc
 8001bb4:	200000b8 	.word	0x200000b8
 8001bb8:	20000120 	.word	0x20000120

08001bbc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bd4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	3b04      	subs	r3, #4
 8001bda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f023 0201 	bic.w	r2, r3, #1
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	3b04      	subs	r3, #4
 8001bea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001bec:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <pxPortInitialiseStack+0x64>)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3b14      	subs	r3, #20
 8001bf6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3b04      	subs	r3, #4
 8001c02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f06f 0202 	mvn.w	r2, #2
 8001c0a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3b20      	subs	r3, #32
 8001c10:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	08001c25 	.word	0x08001c25

08001c24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <prvTaskExitError+0x54>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c36:	d00a      	beq.n	8001c4e <prvTaskExitError+0x2a>
        __asm volatile
 8001c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c3c:	f383 8811 	msr	BASEPRI, r3
 8001c40:	f3bf 8f6f 	isb	sy
 8001c44:	f3bf 8f4f 	dsb	sy
 8001c48:	60fb      	str	r3, [r7, #12]
    }
 8001c4a:	bf00      	nop
 8001c4c:	e7fe      	b.n	8001c4c <prvTaskExitError+0x28>
        __asm volatile
 8001c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c52:	f383 8811 	msr	BASEPRI, r3
 8001c56:	f3bf 8f6f 	isb	sy
 8001c5a:	f3bf 8f4f 	dsb	sy
 8001c5e:	60bb      	str	r3, [r7, #8]
    }
 8001c60:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001c62:	bf00      	nop
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0fc      	beq.n	8001c64 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001c6a:	bf00      	nop
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	20000004 	.word	0x20000004
 8001c7c:	00000000 	.word	0x00000000

08001c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001c80:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <pxCurrentTCBConst2>)
 8001c82:	6819      	ldr	r1, [r3, #0]
 8001c84:	6808      	ldr	r0, [r1, #0]
 8001c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c8a:	f380 8809 	msr	PSP, r0
 8001c8e:	f3bf 8f6f 	isb	sy
 8001c92:	f04f 0000 	mov.w	r0, #0
 8001c96:	f380 8811 	msr	BASEPRI, r0
 8001c9a:	4770      	bx	lr
 8001c9c:	f3af 8000 	nop.w

08001ca0 <pxCurrentTCBConst2>:
 8001ca0:	20000028 	.word	0x20000028
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop

08001ca8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001ca8:	4808      	ldr	r0, [pc, #32]	; (8001ccc <prvPortStartFirstTask+0x24>)
 8001caa:	6800      	ldr	r0, [r0, #0]
 8001cac:	6800      	ldr	r0, [r0, #0]
 8001cae:	f380 8808 	msr	MSP, r0
 8001cb2:	f04f 0000 	mov.w	r0, #0
 8001cb6:	f380 8814 	msr	CONTROL, r0
 8001cba:	b662      	cpsie	i
 8001cbc:	b661      	cpsie	f
 8001cbe:	f3bf 8f4f 	dsb	sy
 8001cc2:	f3bf 8f6f 	isb	sy
 8001cc6:	df00      	svc	0
 8001cc8:	bf00      	nop
 8001cca:	0000      	.short	0x0000
 8001ccc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop

08001cd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001cda:	4b46      	ldr	r3, [pc, #280]	; (8001df4 <xPortStartScheduler+0x120>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a46      	ldr	r2, [pc, #280]	; (8001df8 <xPortStartScheduler+0x124>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d10a      	bne.n	8001cfa <xPortStartScheduler+0x26>
        __asm volatile
 8001ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce8:	f383 8811 	msr	BASEPRI, r3
 8001cec:	f3bf 8f6f 	isb	sy
 8001cf0:	f3bf 8f4f 	dsb	sy
 8001cf4:	613b      	str	r3, [r7, #16]
    }
 8001cf6:	bf00      	nop
 8001cf8:	e7fe      	b.n	8001cf8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001cfa:	4b3e      	ldr	r3, [pc, #248]	; (8001df4 <xPortStartScheduler+0x120>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a3f      	ldr	r2, [pc, #252]	; (8001dfc <xPortStartScheduler+0x128>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d10a      	bne.n	8001d1a <xPortStartScheduler+0x46>
        __asm volatile
 8001d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d08:	f383 8811 	msr	BASEPRI, r3
 8001d0c:	f3bf 8f6f 	isb	sy
 8001d10:	f3bf 8f4f 	dsb	sy
 8001d14:	60fb      	str	r3, [r7, #12]
    }
 8001d16:	bf00      	nop
 8001d18:	e7fe      	b.n	8001d18 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001d1a:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <xPortStartScheduler+0x12c>)
 8001d1c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	22ff      	movs	r2, #255	; 0xff
 8001d2a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001d34:	78fb      	ldrb	r3, [r7, #3]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <xPortStartScheduler+0x130>)
 8001d40:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001d42:	4b31      	ldr	r3, [pc, #196]	; (8001e08 <xPortStartScheduler+0x134>)
 8001d44:	2207      	movs	r2, #7
 8001d46:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001d48:	e009      	b.n	8001d5e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8001d4a:	4b2f      	ldr	r3, [pc, #188]	; (8001e08 <xPortStartScheduler+0x134>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	4a2d      	ldr	r2, [pc, #180]	; (8001e08 <xPortStartScheduler+0x134>)
 8001d52:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d66:	2b80      	cmp	r3, #128	; 0x80
 8001d68:	d0ef      	beq.n	8001d4a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001d6a:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <xPortStartScheduler+0x134>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f1c3 0307 	rsb	r3, r3, #7
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d00a      	beq.n	8001d8c <xPortStartScheduler+0xb8>
        __asm volatile
 8001d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d7a:	f383 8811 	msr	BASEPRI, r3
 8001d7e:	f3bf 8f6f 	isb	sy
 8001d82:	f3bf 8f4f 	dsb	sy
 8001d86:	60bb      	str	r3, [r7, #8]
    }
 8001d88:	bf00      	nop
 8001d8a:	e7fe      	b.n	8001d8a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	; (8001e08 <xPortStartScheduler+0x134>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <xPortStartScheduler+0x134>)
 8001d94:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001d96:	4b1c      	ldr	r3, [pc, #112]	; (8001e08 <xPortStartScheduler+0x134>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d9e:	4a1a      	ldr	r2, [pc, #104]	; (8001e08 <xPortStartScheduler+0x134>)
 8001da0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <xPortStartScheduler+0x138>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a17      	ldr	r2, [pc, #92]	; (8001e0c <xPortStartScheduler+0x138>)
 8001db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <xPortStartScheduler+0x138>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a14      	ldr	r2, [pc, #80]	; (8001e0c <xPortStartScheduler+0x138>)
 8001dbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001dc0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001dc2:	f000 f8db 	bl	8001f7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <xPortStartScheduler+0x13c>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8001dcc:	f000 f8f0 	bl	8001fb0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001dd0:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <xPortStartScheduler+0x140>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0f      	ldr	r2, [pc, #60]	; (8001e14 <xPortStartScheduler+0x140>)
 8001dd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001dda:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001ddc:	f7ff ff64 	bl	8001ca8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001de0:	f7ff fa78 	bl	80012d4 <vTaskSwitchContext>
    prvTaskExitError();
 8001de4:	f7ff ff1e 	bl	8001c24 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00
 8001df8:	410fc271 	.word	0x410fc271
 8001dfc:	410fc270 	.word	0x410fc270
 8001e00:	e000e400 	.word	0xe000e400
 8001e04:	2000012c 	.word	0x2000012c
 8001e08:	20000130 	.word	0x20000130
 8001e0c:	e000ed20 	.word	0xe000ed20
 8001e10:	20000004 	.word	0x20000004
 8001e14:	e000ef34 	.word	0xe000ef34

08001e18 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
        __asm volatile
 8001e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e22:	f383 8811 	msr	BASEPRI, r3
 8001e26:	f3bf 8f6f 	isb	sy
 8001e2a:	f3bf 8f4f 	dsb	sy
 8001e2e:	607b      	str	r3, [r7, #4]
    }
 8001e30:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001e32:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <vPortEnterCritical+0x58>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <vPortEnterCritical+0x58>)
 8001e3a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <vPortEnterCritical+0x58>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d10f      	bne.n	8001e64 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <vPortEnterCritical+0x5c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <vPortEnterCritical+0x4c>
        __asm volatile
 8001e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e52:	f383 8811 	msr	BASEPRI, r3
 8001e56:	f3bf 8f6f 	isb	sy
 8001e5a:	f3bf 8f4f 	dsb	sy
 8001e5e:	603b      	str	r3, [r7, #0]
    }
 8001e60:	bf00      	nop
 8001e62:	e7fe      	b.n	8001e62 <vPortEnterCritical+0x4a>
    }
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	20000004 	.word	0x20000004
 8001e74:	e000ed04 	.word	0xe000ed04

08001e78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001e7e:	4b12      	ldr	r3, [pc, #72]	; (8001ec8 <vPortExitCritical+0x50>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10a      	bne.n	8001e9c <vPortExitCritical+0x24>
        __asm volatile
 8001e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e8a:	f383 8811 	msr	BASEPRI, r3
 8001e8e:	f3bf 8f6f 	isb	sy
 8001e92:	f3bf 8f4f 	dsb	sy
 8001e96:	607b      	str	r3, [r7, #4]
    }
 8001e98:	bf00      	nop
 8001e9a:	e7fe      	b.n	8001e9a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <vPortExitCritical+0x50>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <vPortExitCritical+0x50>)
 8001ea4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <vPortExitCritical+0x50>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d105      	bne.n	8001eba <vPortExitCritical+0x42>
 8001eae:	2300      	movs	r3, #0
 8001eb0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001eb8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000004 	.word	0x20000004
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001ed0:	f3ef 8009 	mrs	r0, PSP
 8001ed4:	f3bf 8f6f 	isb	sy
 8001ed8:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <pxCurrentTCBConst>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	f01e 0f10 	tst.w	lr, #16
 8001ee0:	bf08      	it	eq
 8001ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eea:	6010      	str	r0, [r2, #0]
 8001eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ef4:	f380 8811 	msr	BASEPRI, r0
 8001ef8:	f3bf 8f4f 	dsb	sy
 8001efc:	f3bf 8f6f 	isb	sy
 8001f00:	f7ff f9e8 	bl	80012d4 <vTaskSwitchContext>
 8001f04:	f04f 0000 	mov.w	r0, #0
 8001f08:	f380 8811 	msr	BASEPRI, r0
 8001f0c:	bc09      	pop	{r0, r3}
 8001f0e:	6819      	ldr	r1, [r3, #0]
 8001f10:	6808      	ldr	r0, [r1, #0]
 8001f12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f16:	f01e 0f10 	tst.w	lr, #16
 8001f1a:	bf08      	it	eq
 8001f1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001f20:	f380 8809 	msr	PSP, r0
 8001f24:	f3bf 8f6f 	isb	sy
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	f3af 8000 	nop.w

08001f30 <pxCurrentTCBConst>:
 8001f30:	20000028 	.word	0x20000028
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop

08001f38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
        __asm volatile
 8001f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f42:	f383 8811 	msr	BASEPRI, r3
 8001f46:	f3bf 8f6f 	isb	sy
 8001f4a:	f3bf 8f4f 	dsb	sy
 8001f4e:	607b      	str	r3, [r7, #4]
    }
 8001f50:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001f52:	f7ff f8a9 	bl	80010a8 <xTaskIncrementTick>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <SysTick_Handler+0x40>)
 8001f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	2300      	movs	r3, #0
 8001f66:	603b      	str	r3, [r7, #0]
        __asm volatile
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	f383 8811 	msr	BASEPRI, r3
    }
 8001f6e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	e000ed04 	.word	0xe000ed04

08001f7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001f80:	4b08      	ldr	r3, [pc, #32]	; (8001fa4 <vPortSetupTimerInterrupt+0x28>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001f86:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <vPortSetupTimerInterrupt+0x2c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <vPortSetupTimerInterrupt+0x30>)
 8001f8e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001f92:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <vPortSetupTimerInterrupt+0x28>)
 8001f96:	2207      	movs	r2, #7
 8001f98:	601a      	str	r2, [r3, #0]
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000e010 	.word	0xe000e010
 8001fa8:	e000e018 	.word	0xe000e018
 8001fac:	e000e014 	.word	0xe000e014

08001fb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8001fb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001fc0 <vPortEnableVFP+0x10>
 8001fb4:	6801      	ldr	r1, [r0, #0]
 8001fb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001fba:	6001      	str	r1, [r0, #0]
 8001fbc:	4770      	bx	lr
 8001fbe:	0000      	.short	0x0000
 8001fc0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop

08001fc8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	; 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8001fd4:	f7fe ff4e 	bl	8000e74 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001fd8:	4b53      	ldr	r3, [pc, #332]	; (8002128 <pvPortMalloc+0x160>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8001fe0:	f000 f908 	bl	80021f4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d012      	beq.n	8002010 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8001fea:	2208      	movs	r2, #8
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	3308      	adds	r3, #8
 8001ff6:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d804      	bhi.n	800200c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	4413      	add	r3, r2
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	e001      	b.n	8002010 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	db70      	blt.n	80020f8 <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d06d      	beq.n	80020f8 <pvPortMalloc+0x130>
 800201c:	4b43      	ldr	r3, [pc, #268]	; (800212c <pvPortMalloc+0x164>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	429a      	cmp	r2, r3
 8002024:	d868      	bhi.n	80020f8 <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002026:	4b42      	ldr	r3, [pc, #264]	; (8002130 <pvPortMalloc+0x168>)
 8002028:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800202a:	4b41      	ldr	r3, [pc, #260]	; (8002130 <pvPortMalloc+0x168>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002030:	e004      	b.n	800203c <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	429a      	cmp	r2, r3
 8002044:	d903      	bls.n	800204e <pvPortMalloc+0x86>
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f1      	bne.n	8002032 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800204e:	4b36      	ldr	r3, [pc, #216]	; (8002128 <pvPortMalloc+0x160>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002054:	429a      	cmp	r2, r3
 8002056:	d04f      	beq.n	80020f8 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2208      	movs	r2, #8
 800205e:	4413      	add	r3, r2
 8002060:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	1ad2      	subs	r2, r2, r3
 8002072:	2308      	movs	r3, #8
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	429a      	cmp	r2, r3
 8002078:	d91f      	bls.n	80020ba <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800207a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4413      	add	r3, r2
 8002080:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <pvPortMalloc+0xda>
        __asm volatile
 800208c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002090:	f383 8811 	msr	BASEPRI, r3
 8002094:	f3bf 8f6f 	isb	sy
 8002098:	f3bf 8f4f 	dsb	sy
 800209c:	613b      	str	r3, [r7, #16]
    }
 800209e:	bf00      	nop
 80020a0:	e7fe      	b.n	80020a0 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	1ad2      	subs	r2, r2, r3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80020b4:	6978      	ldr	r0, [r7, #20]
 80020b6:	f000 f8f9 	bl	80022ac <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80020ba:	4b1c      	ldr	r3, [pc, #112]	; (800212c <pvPortMalloc+0x164>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	4a19      	ldr	r2, [pc, #100]	; (800212c <pvPortMalloc+0x164>)
 80020c6:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80020c8:	4b18      	ldr	r3, [pc, #96]	; (800212c <pvPortMalloc+0x164>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <pvPortMalloc+0x16c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d203      	bcs.n	80020dc <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80020d4:	4b15      	ldr	r3, [pc, #84]	; (800212c <pvPortMalloc+0x164>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a16      	ldr	r2, [pc, #88]	; (8002134 <pvPortMalloc+0x16c>)
 80020da:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80020ee:	4b12      	ldr	r3, [pc, #72]	; (8002138 <pvPortMalloc+0x170>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	3301      	adds	r3, #1
 80020f4:	4a10      	ldr	r2, [pc, #64]	; (8002138 <pvPortMalloc+0x170>)
 80020f6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80020f8:	f7fe feca 	bl	8000e90 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <pvPortMalloc+0x154>
        __asm volatile
 8002106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210a:	f383 8811 	msr	BASEPRI, r3
 800210e:	f3bf 8f6f 	isb	sy
 8002112:	f3bf 8f4f 	dsb	sy
 8002116:	60fb      	str	r3, [r7, #12]
    }
 8002118:	bf00      	nop
 800211a:	e7fe      	b.n	800211a <pvPortMalloc+0x152>
    return pvReturn;
 800211c:	69fb      	ldr	r3, [r7, #28]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3728      	adds	r7, #40	; 0x28
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20001d3c 	.word	0x20001d3c
 800212c:	20001d40 	.word	0x20001d40
 8002130:	20001d34 	.word	0x20001d34
 8002134:	20001d44 	.word	0x20001d44
 8002138:	20001d48 	.word	0x20001d48

0800213c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d049      	beq.n	80021e2 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800214e:	2308      	movs	r3, #8
 8002150:	425b      	negs	r3, r3
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4413      	add	r3, r2
 8002156:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <vPortFree+0x3e>
        __asm volatile
 8002164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002168:	f383 8811 	msr	BASEPRI, r3
 800216c:	f3bf 8f6f 	isb	sy
 8002170:	f3bf 8f4f 	dsb	sy
 8002174:	60fb      	str	r3, [r7, #12]
    }
 8002176:	bf00      	nop
 8002178:	e7fe      	b.n	8002178 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <vPortFree+0x5c>
        __asm volatile
 8002182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002186:	f383 8811 	msr	BASEPRI, r3
 800218a:	f3bf 8f6f 	isb	sy
 800218e:	f3bf 8f4f 	dsb	sy
 8002192:	60bb      	str	r3, [r7, #8]
    }
 8002194:	bf00      	nop
 8002196:	e7fe      	b.n	8002196 <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	0fdb      	lsrs	r3, r3, #31
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01c      	beq.n	80021e2 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d118      	bne.n	80021e2 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80021bc:	f7fe fe5a 	bl	8000e74 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <vPortFree+0xb0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4413      	add	r3, r2
 80021ca:	4a08      	ldr	r2, [pc, #32]	; (80021ec <vPortFree+0xb0>)
 80021cc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80021ce:	6938      	ldr	r0, [r7, #16]
 80021d0:	f000 f86c 	bl	80022ac <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <vPortFree+0xb4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	3301      	adds	r3, #1
 80021da:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <vPortFree+0xb4>)
 80021dc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80021de:	f7fe fe57 	bl	8000e90 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80021e2:	bf00      	nop
 80021e4:	3718      	adds	r7, #24
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20001d40 	.word	0x20001d40
 80021f0:	20001d4c 	.word	0x20001d4c

080021f4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80021fa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021fe:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002200:	4b25      	ldr	r3, [pc, #148]	; (8002298 <prvHeapInit+0xa4>)
 8002202:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00c      	beq.n	8002228 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	3307      	adds	r3, #7
 8002212:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f023 0307 	bic.w	r3, r3, #7
 800221a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	4a1d      	ldr	r2, [pc, #116]	; (8002298 <prvHeapInit+0xa4>)
 8002224:	4413      	add	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800222c:	4a1b      	ldr	r2, [pc, #108]	; (800229c <prvHeapInit+0xa8>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <prvHeapInit+0xa8>)
 8002234:	2200      	movs	r2, #0
 8002236:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	4413      	add	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002240:	2208      	movs	r2, #8
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 0307 	bic.w	r3, r3, #7
 800224e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <prvHeapInit+0xac>)
 8002254:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <prvHeapInit+0xac>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2200      	movs	r2, #0
 800225c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <prvHeapInit+0xac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	1ad2      	subs	r2, r2, r3
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002274:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <prvHeapInit+0xac>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4a08      	ldr	r2, [pc, #32]	; (80022a4 <prvHeapInit+0xb0>)
 8002282:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <prvHeapInit+0xb4>)
 800228a:	6013      	str	r3, [r2, #0]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	20000134 	.word	0x20000134
 800229c:	20001d34 	.word	0x20001d34
 80022a0:	20001d3c 	.word	0x20001d3c
 80022a4:	20001d44 	.word	0x20001d44
 80022a8:	20001d40 	.word	0x20001d40

080022ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80022b4:	4b28      	ldr	r3, [pc, #160]	; (8002358 <prvInsertBlockIntoFreeList+0xac>)
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	e002      	b.n	80022c0 <prvInsertBlockIntoFreeList+0x14>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d8f7      	bhi.n	80022ba <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	4413      	add	r3, r2
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d108      	bne.n	80022ee <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	441a      	add	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	441a      	add	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d118      	bne.n	8002334 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <prvInsertBlockIntoFreeList+0xb0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d00d      	beq.n	800232a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	441a      	add	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	e008      	b.n	800233c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800232a:	4b0c      	ldr	r3, [pc, #48]	; (800235c <prvInsertBlockIntoFreeList+0xb0>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	e003      	b.n	800233c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	429a      	cmp	r2, r3
 8002342:	d002      	beq.n	800234a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800234a:	bf00      	nop
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20001d34 	.word	0x20001d34
 800235c:	20001d3c 	.word	0x20001d3c

08002360 <RCC_voidSysClkInit>:
#include "RCC_interface.h"
#include "RCC_private.h"
#include "RCC_config.h"

void	RCC_voidSysClkInit(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
	/*	RCC_CR + RCC_CFGR	/ /	HSI internal 		*/
	RCC_CR		=	0x00000001	;
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <RCC_voidSysClkInit+0x4c>)
 8002366:	2201      	movs	r2, #1
 8002368:	601a      	str	r2, [r3, #0]
	RCC_CFGR	=	0x00000000	;
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <RCC_voidSysClkInit+0x50>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
	SET_bit(RCC_CFGR,7);
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <RCC_voidSysClkInit+0x50>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0e      	ldr	r2, [pc, #56]	; (80023b0 <RCC_voidSysClkInit+0x50>)
 8002376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800237a:	6013      	str	r3, [r2, #0]
	CLR_bit(RCC_CFGR,6);
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <RCC_voidSysClkInit+0x50>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <RCC_voidSysClkInit+0x50>)
 8002382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002386:	6013      	str	r3, [r2, #0]
	CLR_bit(RCC_CFGR,5);
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <RCC_voidSysClkInit+0x50>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <RCC_voidSysClkInit+0x50>)
 800238e:	f023 0320 	bic.w	r3, r3, #32
 8002392:	6013      	str	r3, [r2, #0]
	CLR_bit(RCC_CFGR,4);
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <RCC_voidSysClkInit+0x50>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a05      	ldr	r2, [pc, #20]	; (80023b0 <RCC_voidSysClkInit+0x50>)
 800239a:	f023 0310 	bic.w	r3, r3, #16
 800239e:	6013      	str	r3, [r2, #0]
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40023808 	.word	0x40023808

080023b4 <RCC_voidEnablePerClk>:

//RCC_voidEnablePerClk(RCC_AHB1,0);

void	RCC_voidEnablePerClk(u8 BusId , u8 PerId)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	460a      	mov	r2, r1
 80023be:	71fb      	strb	r3, [r7, #7]
 80023c0:	4613      	mov	r3, r2
 80023c2:	71bb      	strb	r3, [r7, #6]
	/*		Range Check		*/
	if(BusId < 3 && PerId < 32)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d82d      	bhi.n	8002426 <RCC_voidEnablePerClk+0x72>
 80023ca:	79bb      	ldrb	r3, [r7, #6]
 80023cc:	2b1f      	cmp	r3, #31
 80023ce:	d82a      	bhi.n	8002426 <RCC_voidEnablePerClk+0x72>
	{
		switch(BusId)
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d01c      	beq.n	8002410 <RCC_voidEnablePerClk+0x5c>
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	dc25      	bgt.n	8002426 <RCC_voidEnablePerClk+0x72>
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <RCC_voidEnablePerClk+0x30>
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d00b      	beq.n	80023fa <RCC_voidEnablePerClk+0x46>
			case RCC_APB1 :	SET_bit(RCC_APB1ENR,PerId);		break;
			case RCC_APB2 :	SET_bit(RCC_APB2ENR,PerId);		break;
		}
	}else{	/*	Report Error  */}
	
}
 80023e2:	e020      	b.n	8002426 <RCC_voidEnablePerClk+0x72>
			case RCC_AHB1 :	SET_bit(RCC_AHB1ENR,PerId);		break;
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <RCC_voidEnablePerClk+0x80>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	79ba      	ldrb	r2, [r7, #6]
 80023ea:	2101      	movs	r1, #1
 80023ec:	fa01 f202 	lsl.w	r2, r1, r2
 80023f0:	4611      	mov	r1, r2
 80023f2:	4a10      	ldr	r2, [pc, #64]	; (8002434 <RCC_voidEnablePerClk+0x80>)
 80023f4:	430b      	orrs	r3, r1
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	e015      	b.n	8002426 <RCC_voidEnablePerClk+0x72>
			case RCC_APB1 :	SET_bit(RCC_APB1ENR,PerId);		break;
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <RCC_voidEnablePerClk+0x84>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	79ba      	ldrb	r2, [r7, #6]
 8002400:	2101      	movs	r1, #1
 8002402:	fa01 f202 	lsl.w	r2, r1, r2
 8002406:	4611      	mov	r1, r2
 8002408:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <RCC_voidEnablePerClk+0x84>)
 800240a:	430b      	orrs	r3, r1
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e00a      	b.n	8002426 <RCC_voidEnablePerClk+0x72>
			case RCC_APB2 :	SET_bit(RCC_APB2ENR,PerId);		break;
 8002410:	4b0a      	ldr	r3, [pc, #40]	; (800243c <RCC_voidEnablePerClk+0x88>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	79ba      	ldrb	r2, [r7, #6]
 8002416:	2101      	movs	r1, #1
 8002418:	fa01 f202 	lsl.w	r2, r1, r2
 800241c:	4611      	mov	r1, r2
 800241e:	4a07      	ldr	r2, [pc, #28]	; (800243c <RCC_voidEnablePerClk+0x88>)
 8002420:	430b      	orrs	r3, r1
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	bf00      	nop
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40023830 	.word	0x40023830
 8002438:	40023840 	.word	0x40023840
 800243c:	40023844 	.word	0x40023844

08002440 <main>:
*/



int main(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af02      	add	r7, sp, #8
	RCC_voidSysClkInit();
 8002446:	f7ff ff8b 	bl	8002360 <RCC_voidSysClkInit>
	RCC_voidEnablePerClk(RCC_AHB1,0);
 800244a:	2100      	movs	r1, #0
 800244c:	2000      	movs	r0, #0
 800244e:	f7ff ffb1 	bl	80023b4 <RCC_voidEnablePerClk>

	SET_bit(GPIOA_MODE,0);
 8002452:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <main+0xd0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a2e      	ldr	r2, [pc, #184]	; (8002510 <main+0xd0>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	6013      	str	r3, [r2, #0]
	CLR_bit(GPIOA_MODE,1);
 800245e:	4b2c      	ldr	r3, [pc, #176]	; (8002510 <main+0xd0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2b      	ldr	r2, [pc, #172]	; (8002510 <main+0xd0>)
 8002464:	f023 0302 	bic.w	r3, r3, #2
 8002468:	6013      	str	r3, [r2, #0]
	CLR_bit(GPIOA_MODE,2);
 800246a:	4b29      	ldr	r3, [pc, #164]	; (8002510 <main+0xd0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a28      	ldr	r2, [pc, #160]	; (8002510 <main+0xd0>)
 8002470:	f023 0304 	bic.w	r3, r3, #4
 8002474:	6013      	str	r3, [r2, #0]
	CLR_bit(GPIOA_MODE,3);
 8002476:	4b26      	ldr	r3, [pc, #152]	; (8002510 <main+0xd0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a25      	ldr	r2, [pc, #148]	; (8002510 <main+0xd0>)
 800247c:	f023 0308 	bic.w	r3, r3, #8
 8002480:	6013      	str	r3, [r2, #0]


	//SET_bit(GPIOC_PUPDR,26);
	//CLR_bit(GPIOC_PUPDR,27);

	CLR_bit(GPIOA_PUPDR,2);
 8002482:	4b24      	ldr	r3, [pc, #144]	; (8002514 <main+0xd4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a23      	ldr	r2, [pc, #140]	; (8002514 <main+0xd4>)
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	6013      	str	r3, [r2, #0]
	SET_bit(GPIOA_PUPDR,3);
 800248e:	4b21      	ldr	r3, [pc, #132]	; (8002514 <main+0xd4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a20      	ldr	r2, [pc, #128]	; (8002514 <main+0xd4>)
 8002494:	f043 0308 	orr.w	r3, r3, #8
 8002498:	6013      	str	r3, [r2, #0]

	TaskHandle_t	xPushButton = NULL;
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
	TaskHandle_t	xHandleRedLed = NULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	603b      	str	r3, [r7, #0]

	xTaskCreate(Led,"Led Task",85,NULL,2,&xHandleRedLed );
 80024a2:	463b      	mov	r3, r7
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	2302      	movs	r3, #2
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	2300      	movs	r3, #0
 80024ac:	2255      	movs	r2, #85	; 0x55
 80024ae:	491a      	ldr	r1, [pc, #104]	; (8002518 <main+0xd8>)
 80024b0:	481a      	ldr	r0, [pc, #104]	; (800251c <main+0xdc>)
 80024b2:	f7fe fab7 	bl	8000a24 <xTaskCreate>
	xTaskCreate(PushButton,"PushButton Task",85,NULL,1,&xPushButton);
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	2301      	movs	r3, #1
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	2300      	movs	r3, #0
 80024c0:	2255      	movs	r2, #85	; 0x55
 80024c2:	4917      	ldr	r1, [pc, #92]	; (8002520 <main+0xe0>)
 80024c4:	4817      	ldr	r0, [pc, #92]	; (8002524 <main+0xe4>)
 80024c6:	f7fe faad 	bl	8000a24 <xTaskCreate>



	xQueue1 = xQueueCreate( 100, sizeof(u8) );
 80024ca:	2200      	movs	r2, #0
 80024cc:	2101      	movs	r1, #1
 80024ce:	2064      	movs	r0, #100	; 0x64
 80024d0:	f7fe f880 	bl	80005d4 <xQueueGenericCreate>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4a14      	ldr	r2, [pc, #80]	; (8002528 <main+0xe8>)
 80024d8:	6013      	str	r3, [r2, #0]
	xCreatedEventGroup = xEventGroupCreate();
 80024da:	f7fd fe81 	bl	80001e0 <xEventGroupCreate>
 80024de:	4603      	mov	r3, r0
 80024e0:	4a12      	ldr	r2, [pc, #72]	; (800252c <main+0xec>)
 80024e2:	6013      	str	r3, [r2, #0]

	vSemaphoreCreateBinary(ButtonSemaphore);
 80024e4:	2203      	movs	r2, #3
 80024e6:	2100      	movs	r1, #0
 80024e8:	2001      	movs	r0, #1
 80024ea:	f7fe f873 	bl	80005d4 <xQueueGenericCreate>
 80024ee:	4603      	mov	r3, r0
 80024f0:	4a0f      	ldr	r2, [pc, #60]	; (8002530 <main+0xf0>)
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <main+0xf0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d006      	beq.n	800250a <main+0xca>
 80024fc:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <main+0xf0>)
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	2300      	movs	r3, #0
 8002502:	2200      	movs	r2, #0
 8002504:	2100      	movs	r1, #0
 8002506:	f7fe f8d3 	bl	80006b0 <xQueueGenericSend>
	STK_voidBusyWait(1000000);
	CLR_bit(GPIOA_ODR,0);
	STK_voidBusyWait(1000000);
	*/
    /* Loop forever */
	vTaskStartScheduler();
 800250a:	f7fe fc67 	bl	8000ddc <vTaskStartScheduler>
	while(1)
 800250e:	e7fe      	b.n	800250e <main+0xce>
 8002510:	40020000 	.word	0x40020000
 8002514:	4002000c 	.word	0x4002000c
 8002518:	080026e4 	.word	0x080026e4
 800251c:	08002591 	.word	0x08002591
 8002520:	080026f0 	.word	0x080026f0
 8002524:	08002535 	.word	0x08002535
 8002528:	20001d50 	.word	0x20001d50
 800252c:	20001d54 	.word	0x20001d54
 8002530:	20001d58 	.word	0x20001d58

08002534 <PushButton>:





void PushButton(void * pvparam){
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	 portTickType Freq = 50;
 800253c:	2332      	movs	r3, #50	; 0x32
 800253e:	60fb      	str	r3, [r7, #12]
	 portTickType Start = xTaskGetTickCount();
 8002540:	f7fe fda2 	bl	8001088 <xTaskGetTickCount>
 8002544:	4603      	mov	r3, r0
 8002546:	60bb      	str	r3, [r7, #8]
	 while (1){
		 /* if the Push Button is Pressed */
		 if (GET_bit(GPIOA_IDR,1) == 1){
 8002548:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <PushButton+0x4c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	085b      	lsrs	r3, r3, #1
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b01      	cmp	r3, #1
 8002554:	d10c      	bne.n	8002570 <PushButton+0x3c>
				 /*Change the State **/
				 xQueueSend( xQueue1,&ButtonState, ( TickType_t ) 0 );
 8002556:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <PushButton+0x50>)
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	2300      	movs	r3, #0
 800255c:	2200      	movs	r2, #0
 800255e:	490a      	ldr	r1, [pc, #40]	; (8002588 <PushButton+0x54>)
 8002560:	f7fe f8a6 	bl	80006b0 <xQueueGenericSend>
				 xEventGroupSetBits(xCreatedEventGroup,(1<<0));
 8002564:	4b09      	ldr	r3, [pc, #36]	; (800258c <PushButton+0x58>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2101      	movs	r1, #1
 800256a:	4618      	mov	r0, r3
 800256c:	f7fd fe87 	bl	800027e <xEventGroupSetBits>
		 }

		 /*Make the Task Periodic with Period 50 Tick */
		 vTaskDelayUntil(&Start,Freq);
 8002570:	f107 0308 	add.w	r3, r7, #8
 8002574:	68f9      	ldr	r1, [r7, #12]
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fbb2 	bl	8000ce0 <xTaskDelayUntil>
		 if (GET_bit(GPIOA_IDR,1) == 1){
 800257c:	e7e4      	b.n	8002548 <PushButton+0x14>
 800257e:	bf00      	nop
 8002580:	40020010 	.word	0x40020010
 8002584:	20001d50 	.word	0x20001d50
 8002588:	20000008 	.word	0x20000008
 800258c:	20001d54 	.word	0x20001d54

08002590 <Led>:
	 }

 }


void Led(void * pvparam){
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	 portTickType Freq = 600;
 8002598:	f44f 7316 	mov.w	r3, #600	; 0x258
 800259c:	617b      	str	r3, [r7, #20]
	 portTickType Start = xTaskGetTickCount();
 800259e:	f7fe fd73 	bl	8001088 <xTaskGetTickCount>
 80025a2:	4603      	mov	r3, r0
 80025a4:	60fb      	str	r3, [r7, #12]
	 EventBits_t uxbits;
	 while (1){

		 uxbits = xEventGroupGetBits( xCreatedEventGroup );
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <Led+0x54>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fd fe2e 	bl	800020e <xEventGroupClearBits>
 80025b2:	6138      	str	r0, [r7, #16]
		 if(GET_bit(uxbits,0) == 1){
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <Led+0x46>
			 TOG_bit(GPIOA_ODR,0);
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <Led+0x58>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <Led+0x58>)
 80025c4:	f083 0301 	eor.w	r3, r3, #1
 80025c8:	6013      	str	r3, [r2, #0]
			 xEventGroupClearBits(xCreatedEventGroup,(1<<0));
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <Led+0x54>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2101      	movs	r1, #1
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd fe1c 	bl	800020e <xEventGroupClearBits>
		 */
		 /*Else Delay 1000 Tick till the Resource is Free **/


		 /*Make the Task Periodic with Period 50 Tick */
		 vTaskDelayUntil(&Start,Freq);
 80025d6:	f107 030c 	add.w	r3, r7, #12
 80025da:	6979      	ldr	r1, [r7, #20]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe fb7f 	bl	8000ce0 <xTaskDelayUntil>
		 uxbits = xEventGroupGetBits( xCreatedEventGroup );
 80025e2:	e7e0      	b.n	80025a6 <Led+0x16>
 80025e4:	20001d54 	.word	0x20001d54
 80025e8:	40020014 	.word	0x40020014

080025ec <EXTI0_IRQHandler>:
	}
}



void EXTI0_IRQHandler(){
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0

	/* Clear The Flag */

	//SET_bit(GPIOA_ODR,4);
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025fc:	480d      	ldr	r0, [pc, #52]	; (8002634 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002600:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002604:	480c      	ldr	r0, [pc, #48]	; (8002638 <LoopForever+0x6>)
  ldr r1, =_edata
 8002606:	490d      	ldr	r1, [pc, #52]	; (800263c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002608:	4a0d      	ldr	r2, [pc, #52]	; (8002640 <LoopForever+0xe>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800260c:	e002      	b.n	8002614 <LoopCopyDataInit>

0800260e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002612:	3304      	adds	r3, #4

08002614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002618:	d3f9      	bcc.n	800260e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261a:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800261c:	4c0a      	ldr	r4, [pc, #40]	; (8002648 <LoopForever+0x16>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002620:	e001      	b.n	8002626 <LoopFillZerobss>

08002622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002624:	3204      	adds	r2, #4

08002626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002628:	d3fb      	bcc.n	8002622 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800262a:	f000 f811 	bl	8002650 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800262e:	f7ff ff07 	bl	8002440 <main>

08002632 <LoopForever>:

LoopForever:
  b LoopForever
 8002632:	e7fe      	b.n	8002632 <LoopForever>
  ldr   r0, =_estack
 8002634:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800263c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002640:	08002708 	.word	0x08002708
  ldr r2, =_sbss
 8002644:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002648:	20001d5c 	.word	0x20001d5c

0800264c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800264c:	e7fe      	b.n	800264c <ADC_IRQHandler>
	...

08002650 <__libc_init_array>:
 8002650:	b570      	push	{r4, r5, r6, lr}
 8002652:	4d0d      	ldr	r5, [pc, #52]	; (8002688 <__libc_init_array+0x38>)
 8002654:	4c0d      	ldr	r4, [pc, #52]	; (800268c <__libc_init_array+0x3c>)
 8002656:	1b64      	subs	r4, r4, r5
 8002658:	10a4      	asrs	r4, r4, #2
 800265a:	2600      	movs	r6, #0
 800265c:	42a6      	cmp	r6, r4
 800265e:	d109      	bne.n	8002674 <__libc_init_array+0x24>
 8002660:	4d0b      	ldr	r5, [pc, #44]	; (8002690 <__libc_init_array+0x40>)
 8002662:	4c0c      	ldr	r4, [pc, #48]	; (8002694 <__libc_init_array+0x44>)
 8002664:	f000 f82e 	bl	80026c4 <_init>
 8002668:	1b64      	subs	r4, r4, r5
 800266a:	10a4      	asrs	r4, r4, #2
 800266c:	2600      	movs	r6, #0
 800266e:	42a6      	cmp	r6, r4
 8002670:	d105      	bne.n	800267e <__libc_init_array+0x2e>
 8002672:	bd70      	pop	{r4, r5, r6, pc}
 8002674:	f855 3b04 	ldr.w	r3, [r5], #4
 8002678:	4798      	blx	r3
 800267a:	3601      	adds	r6, #1
 800267c:	e7ee      	b.n	800265c <__libc_init_array+0xc>
 800267e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002682:	4798      	blx	r3
 8002684:	3601      	adds	r6, #1
 8002686:	e7f2      	b.n	800266e <__libc_init_array+0x1e>
 8002688:	08002700 	.word	0x08002700
 800268c:	08002700 	.word	0x08002700
 8002690:	08002700 	.word	0x08002700
 8002694:	08002704 	.word	0x08002704

08002698 <memcpy>:
 8002698:	440a      	add	r2, r1
 800269a:	4291      	cmp	r1, r2
 800269c:	f100 33ff 	add.w	r3, r0, #4294967295
 80026a0:	d100      	bne.n	80026a4 <memcpy+0xc>
 80026a2:	4770      	bx	lr
 80026a4:	b510      	push	{r4, lr}
 80026a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026ae:	4291      	cmp	r1, r2
 80026b0:	d1f9      	bne.n	80026a6 <memcpy+0xe>
 80026b2:	bd10      	pop	{r4, pc}

080026b4 <memset>:
 80026b4:	4402      	add	r2, r0
 80026b6:	4603      	mov	r3, r0
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d100      	bne.n	80026be <memset+0xa>
 80026bc:	4770      	bx	lr
 80026be:	f803 1b01 	strb.w	r1, [r3], #1
 80026c2:	e7f9      	b.n	80026b8 <memset+0x4>

080026c4 <_init>:
 80026c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c6:	bf00      	nop
 80026c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ca:	bc08      	pop	{r3}
 80026cc:	469e      	mov	lr, r3
 80026ce:	4770      	bx	lr

080026d0 <_fini>:
 80026d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d2:	bf00      	nop
 80026d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026d6:	bc08      	pop	{r3}
 80026d8:	469e      	mov	lr, r3
 80026da:	4770      	bx	lr
